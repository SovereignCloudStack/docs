"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[80295],{49322:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"scs-0210-w1-k8s-version-policy-implementation-testing","title":"SCS K8S Version Policy: Implementation and Testing Notes","description":"Implementation notes","source":"@site/standards/scs-0210-w1-k8s-version-policy-implementation-testing.md","sourceDirName":".","slug":"/scs-0210-w1-k8s-version-policy-implementation-testing","permalink":"/standards/scs-0210-w1-k8s-version-policy-implementation-testing","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"SCS K8S Version Policy: Implementation and Testing Notes","type":"Supplement","track":"KaaS","status":"Draft","supplements":["scs-0210-v2-k8s-version-policy.md"]},"sidebar":"standards","previous":{"title":"V2","permalink":"/standards/scs-0210-v2-k8s-version-policy"},"next":{"title":"scs-0211: SCS KaaS default storage class","permalink":"/standards/kaas/scs-0211"}}');var i=s(74848),a=s(28453);const o={title:"SCS K8S Version Policy: Implementation and Testing Notes",type:"Supplement",track:"KaaS",status:"Draft",supplements:["scs-0210-v2-k8s-version-policy.md"]},r=void 0,l={},c=[{value:"Implementation notes",id:"implementation-notes",level:2},{value:"Automated tests",id:"automated-tests",level:2},{value:"Implementation",id:"implementation",level:3},{value:"Manual tests",id:"manual-tests",level:2}];function d(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"implementation-notes",children:"Implementation notes"}),"\n",(0,i.jsxs)(t.p,{children:["The standard is quite concise about ",(0,i.jsx)(t.a,{href:"https://docs.scs.community/standards/scs-0210-v2-k8s-version-policy#decision",children:"the regulations"}),",\nso they are not restated here. Suffice it to say that a\nCSP must make new versions for their KaaS offering available in a timely fashion, so that\nnew versions are available in a short window of time.\nOlder versions need to be supported until the end of their support window."]}),"\n",(0,i.jsxs)(t.p,{children:["Concrete implementation details can't be given here, since not every CSP does provide\ntheir versions the same way. The best advice to give is to monitor the\n",(0,i.jsx)(t.a,{href:"https://kubernetes.io/releases/",children:"Kubernetes releases page"})," closely."]}),"\n",(0,i.jsx)(t.h2,{id:"automated-tests",children:"Automated tests"}),"\n",(0,i.jsx)(t.h3,{id:"implementation",children:"Implementation"}),"\n",(0,i.jsxs)(t.p,{children:["The script ",(0,i.jsx)(t.a,{href:"https://github.com/SovereignCloudStack/standards/blob/main/Tests/kaas/k8s-version-policy/k8s_version_policy.py",children:(0,i.jsx)(t.code,{children:"k8s_version_policy.py"})}),"\nconnects to an existing K8s cluster and checks the version against a list of versions, that\nare calculated to be inside a recency window."]}),"\n",(0,i.jsx)(t.p,{children:"Note that this implementation is subject to change, because testing an existing cluster is not\nsufficient to guarantee that all active k8s branches are supported and kept up to date."}),"\n",(0,i.jsx)(t.h2,{id:"manual-tests",children:"Manual tests"}),"\n",(0,i.jsx)(t.p,{children:"None."})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>o,x:()=>r});var n=s(96540);const i={},a=n.createContext(i);function o(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);