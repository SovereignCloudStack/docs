"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[84278],{36645:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"certification/test-and-adapt-example","title":"Example testing and adjustment for SCS IaaS-compatible compliance","description":"Run the tests","source":"@site/standards/certification/test-and-adapt-example.md","sourceDirName":"certification","slug":"/certification/test-and-adapt-example","permalink":"/standards/certification/test-and-adapt-example","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"standards","previous":{"title":"Getting SCS-compatible certification (for operators)","permalink":"/standards/certification/getting-scs-compatible-certified"},"next":{"title":"overview","permalink":"/standards/certification/overview"}}');var a=t(74848),i=t(28453);const r={},o="Example testing and adjustment for SCS IaaS-compatible compliance",c={},d=[{value:"Run the tests",id:"run-the-tests",level:2},{value:"Address issues",id:"address-issues",level:2},{value:"Rerun tests",id:"rerun-tests",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"example-testing-and-adjustment-for-scs-iaas-compatible-compliance",children:"Example testing and adjustment for SCS IaaS-compatible compliance"})}),"\n",(0,a.jsx)(n.h2,{id:"run-the-tests",children:"Run the tests"}),"\n",(0,a.jsxs)(n.p,{children:["Get the test suite by cloning ",(0,a.jsx)(n.a,{href:"https://github.com/SovereignCloudStack/standards/",children:"the SCS standards repo"}),".\nIn order to run the tests, you need to have normal customer (tenant) access to the cloud or\ncontainer infrastructure that you want to test. (This is by design; we explicitly do not\nrequire nor recommend admin level access for normal compliance testing.)"]}),"\n",(0,a.jsxs)(n.p,{children:["You can run the test suite from any machine that has a working ",(0,a.jsx)(n.code,{children:"python3-openstacksdk"})," (for the\nIaaS tests) or working ",(0,a.jsx)(n.code,{children:"python3"}),", ",(0,a.jsx)(n.code,{children:"kubectl"})," and ",(0,a.jsx)(n.code,{children:"helm"})," (for the KaaS tests). Go to the\nchecked out tree into the ",(0,a.jsx)(n.code,{children:"Tests/"})," directory to run tests. Check that the tooling works,\ne.g. by issuing a command like ",(0,a.jsx)(n.code,{children:"openstack --os-cloud=MYCLOUD catalog list"})," or\n",(0,a.jsx)(n.code,{children:"KUBECONFIG=~/.kube/MYCLUSTER.yaml kubectl get nodes -o wide"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"Let's do a run against a sample environment:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"garloff@framekurt(//):/casa/src/SCS/standards/Tests [1]$ ./scs-compliance-check.py -V v4 -s CIAB -a os_cloud=ciab-test scs-compatible-iaas.yaml\nINFO: module opc-v2022.11 missing checks or test cases\nDEBUG: Fetching flavors from cloud 'ciab-test'\nDEBUG: Checking 28 flavor specs against 18 flavors\nWARNING: Flavor 'SCS-4V-16' found via name only, missing property 'scs:name-v2'\nERROR: Flavor 'SCS-4V-16' violating property constraints: scs:cpu-type: None should be 'shared-core'; scs:name-v1: None should be 'SCS-4V:16'; scs:name-v2: None should be 'SCS-4V-16'\nWARNING: Flavor 'SCS-8V-32' found via name only, missing property 'scs:name-v2'\nERROR: Flavor 'SCS-8V-32' violating property constraints: scs:cpu-type: None should be 'shared-core'; scs:name-v1: None should be 'SCS-8V:32'; scs:name-v2: None should be 'SCS-8V-32'\nWARNING: Missing recommended flavor 'SCS-1V-4-10'\nWARNING: Missing recommended flavor 'SCS-2V-8-20'\nWARNING: Missing recommended flavor 'SCS-4V-16-50'\nWARNING: Missing recommended flavor 'SCS-8V-32-100'\nWARNING: Missing recommended flavor 'SCS-1V-2-5'\nWARNING: Missing recommended flavor 'SCS-2V-4-10'\nWARNING: Missing recommended flavor 'SCS-4V-8-20'\nWARNING: Missing recommended flavor 'SCS-8V-16-50'\nWARNING: Missing recommended flavor 'SCS-16V-32-100'\nWARNING: Missing recommended flavor 'SCS-1V-8-20'\nWARNING: Missing recommended flavor 'SCS-2V-16-50'\nWARNING: Missing recommended flavor 'SCS-4V-32-100'\nWARNING: Missing recommended flavor 'SCS-1L-1-5'\nDEBUG: Total critical / error / info: 0 / 2 / 0\nDEBUG: Fetching image list from cloud 'ciab-test'\nDEBUG: Images present: Cirros 0.6.1, Cirros 0.6.2, Debian 12, EVIL2, EVIL3, Ubuntu 22.04 Minimal, disk-bf.qcow2, disk-vmdk.vmdk, openSUSE 15.5, openSUSE 15.6\nDEBUG: Checking 6 image specs against 10 images\nERROR: Missing mandatory image 'Ubuntu 22.04'\nWARNING: Missing recommended image 'ubuntu-capi-image'\nDEBUG: Missing optional image 'Ubuntu 20.04'\nDEBUG: Missing optional image 'Debian 11'\nDEBUG: Missing optional image 'Debian 10'\nDEBUG: Total critical / error / warning: 0 / 1 / 1\n********************************************************************************\nCIAB SCS-compatible IaaS v4 (effective):\n- main: FAIL (3 passed, 2 failed)\n  - FAILED:\n    - standard-flavors-check:\n      > Must fulfill all requirements of https://docs.scs.community/standards/scs-0103-v1-standard-flavors\n    - standard-images-check:\n      > Must fulfill all requirements of https://docs.scs.community/standards/scs-0104-v1-standard-images\n"})}),"\n",(0,a.jsxs)(n.p,{children:["So we run the SCS-compatible IaaS tests defined in ",(0,a.jsx)(n.code,{children:"scs-compatible-iaas.yaml"})," in version ",(0,a.jsx)(n.code,{children:"v4"}),"; without option ",(0,a.jsx)(n.code,{children:"-V"}),",\nthe latest effective version would have been used. We further define the cloud to be named ",(0,a.jsx)(n.code,{children:"CIAB"})," (short for\nCloud-in-a-Box) in the report. And we set the parameter ",(0,a.jsx)(n.code,{children:"os_cloud"})," to ",(0,a.jsx)(n.code,{children:"ciab-test"}),". This references the\nname of the cloud as configured in OpenStack ",(0,a.jsx)(n.code,{children:"clouds.yaml"})," and ",(0,a.jsx)(n.code,{children:"secure.yaml"})," which contain the configuration\nand credentials to access the cloud as tenant user via the API (SDK or CLI)."]}),"\n",(0,a.jsx)(n.p,{children:"Let's have a look at the results:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["We seem to have all 15 mandatory compute flavors, but two of them miss mandatory properties (",(0,a.jsx)(n.code,{children:"extra_specs"}),").\nWe also receive 13 warnings for not having recommended flavors, we can ignore them for now."]}),"\n",(0,a.jsxs)(n.li,{children:["On the images side, the mandatory image ",(0,a.jsx)(n.code,{children:"Ubuntu 22.04"})," is not registered."]}),"\n",(0,a.jsx)(n.li,{children:"The end result is that we passed three tests and failed to comply with two specs:"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"    - standard-flavors-check:\n      > Must fulfill all requirements of https://docs.scs.community/standards/scs-0103-v1-standard-flavors\n    - standard-images-check:\n      > Must fulfill all requirements of https://docs.scs.community/standards/scs-0104-v1-standard-images\n"})}),"\n",(0,a.jsxs)(n.p,{children:["With option ",(0,a.jsx)(n.code,{children:"-v"}),", we can make the test suite more verbose to e.g. see that we pass the flavor naming test,\nthe entropy test and the image metadata test."]}),"\n",(0,a.jsx)(n.h2,{id:"address-issues",children:"Address issues"}),"\n",(0,a.jsx)(n.p,{children:"To fix the failures, we will thus need to:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Add properties to the two flavors where they are missing."}),"\n",(0,a.jsxs)(n.li,{children:["Register the ",(0,a.jsx)(n.code,{children:"Ubuntu 22.04"})," image (with the appropriate metadata)."]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["Neither is difficult to do manually, but a more systematic and automated process is preferable.\nFor the first issue, there is a ",(0,a.jsx)(n.a,{href:"https://scs.community/de/tech/2024/08/20/flavor-extra-specs-compliance/",children:"blog article on flavor metadata"}),".\nFor the image registration, the ",(0,a.jsx)(n.a,{href:"https://github.com/osism/openstack-image-manager",children:"OpenStack Image Manager"})," can be used."]}),"\n",(0,a.jsx)(n.p,{children:"For adjusting the environment, we of course do need admin access to the cloud.\nWe use the tools referenced above:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"garloff@framekurt(//):/casa/src/SCS/standards/Tests [3]$ OS_CLOUD=ciab-admin ./iaas/flavor-naming/flavor-add-extra-specs.py -a apply\nINFO: Flavor SCS-8V-32: SET scs:cpu-type=shared-core\nINFO: Flavor SCS-8V-32: SET scs:name-v1=SCS-8V:32\nINFO: Flavor SCS-8V-32: SET scs:name-v2=SCS-8V-32\nINFO: Flavor SCS-4V-16: SET scs:cpu-type=shared-core\nINFO: Flavor SCS-4V-16: SET scs:name-v1=SCS-4V:16\nINFO: Flavor SCS-4V-16: SET scs:name-v2=SCS-4V-16\nINFO: Processed 15 flavors, 6 changes\n"})}),"\n",(0,a.jsx)(n.p,{children:"and as this is a OSISM-based SCS system, we can on the manager just run the image manager:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"dragon@manager:~$ osism manage images --cloud admin --filter \"Ubuntu 22.04\"\n2024-09-23 13:21:43 | INFO     | Processing image 'Ubuntu 22.04 (20240705)'\n2024-09-23 13:21:43 | INFO     | Tested URL https://swift.services.a.regiocloud.tech/swift/v1/AUTH_b182637428444b9aa302bb8d5a5a418c/openstack-images/ubuntu-22.04/20240705-ubuntu-22.04.qcow2: 200\n2024-09-23 13:21:43 | INFO     | Importing image Ubuntu 22.04 (20240705)\n2024-09-23 13:21:43 | INFO     | Importing from URL https://swift.services.a.regiocloud.tech/swift/v1/AUTH_b182637428444b9aa302bb8d5a5a418c/openstack-images/ubuntu-22.04/20240705-ubuntu-22.04.qcow2\n2024-09-23 13:21:44 | INFO     | Waiting for image to leave queued state...\n2024-09-23 13:21:46 | INFO     | Waiting for import to complete...\n2024-09-23 13:21:56 | INFO     | Waiting for import to complete...\n2024-09-23 13:22:06 | INFO     | Waiting for import to complete...\n2024-09-23 13:22:16 | INFO     | Import of 'Ubuntu 22.04 (20240705)' successfully completed, reloading images\n2024-09-23 13:22:17 | INFO     | Checking parameters of 'Ubuntu 22.04 (20240705)'\n2024-09-23 13:22:17 | INFO     | Setting internal_version = 20240705\n2024-09-23 13:22:17 | INFO     | Setting image_original_user = ubuntu\n2024-09-23 13:22:17 | INFO     | Adding tag os:ubuntu\n2024-09-23 13:22:17 | INFO     | Setting property architecture: x86_64\n2024-09-23 13:22:17 | INFO     | Setting property hw_disk_bus: scsi\n2024-09-23 13:22:17 | INFO     | Setting property hw_rng_model: virtio\n2024-09-23 13:22:17 | INFO     | Setting property hw_scsi_model: virtio-scsi\n2024-09-23 13:22:17 | INFO     | Setting property hw_watchdog_action: reset\n2024-09-23 13:22:17 | INFO     | Setting property hypervisor_type: qemu\n2024-09-23 13:22:17 | INFO     | Setting property os_distro: ubuntu\n2024-09-23 13:22:18 | INFO     | Setting property os_version: 22.04\n2024-09-23 13:22:18 | INFO     | Setting property replace_frequency: quarterly\n2024-09-23 13:22:18 | INFO     | Setting property uuid_validity: last-3\n2024-09-23 13:22:18 | INFO     | Setting property provided_until: none\n2024-09-23 13:22:18 | INFO     | Setting property image_description: Ubuntu 22.04\n2024-09-23 13:22:18 | INFO     | Setting property image_name: Ubuntu 22.04\n2024-09-23 13:22:18 | INFO     | Setting property internal_version: 20240705\n2024-09-23 13:22:18 | INFO     | Setting property image_original_user: ubuntu\n2024-09-23 13:22:18 | INFO     | Setting property image_source: https://cloud-images.ubuntu.com/jammy/20240705/jammy-server-cloudimg-amd64.img\n2024-09-23 13:22:18 | INFO     | Setting property image_build_date: 2024-07-05\n2024-09-23 13:22:18 | INFO     | Checking status of 'Ubuntu 22.04 (20240705)'\n2024-09-23 13:22:18 | INFO     | Checking visibility of 'Ubuntu 22.04 (20240705)'\n2024-09-23 13:22:18 | INFO     | Setting visibility of 'Ubuntu 22.04 (20240705)' to 'public'\n2024-09-23 13:22:19 | INFO     | Renaming Ubuntu 22.04 (20240705) to Ubuntu 22.04\n2024-09-23 13:22:19 | INFO     | Processing image 'Ubuntu 22.04 Minimal (20240701)'\ndragon@manager:~$\n"})}),"\n",(0,a.jsxs)(n.p,{children:["A description how SCS-compatible IaaS compliance can be achieved on environments that use different\nOpenStack implementations is written up in a blog article\n",(0,a.jsx)(n.a,{href:"https://scs.community/de/2024/05/13/cost-of-making-an-openstack-cluster-scs-compliant/",children:"Cost of making an OpenStack Cluster SCS compliant"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"rerun-tests",children:"Rerun tests"}),"\n",(0,a.jsx)(n.p,{children:"We now succeed:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"garloff@framekurt(//):/casa/src/SCS/standards/Tests [130]$ ./scs-compliance-check.py -V v4 -s CIAB -a os_cloud=ciab-test scs-compatible-iaas.yaml\nINFO: module opc-v2022.11 missing checks or test cases\nCIAB SCS-compatible IaaS v4 (effective):\n- main: PASS (5 passed)\n"})}),"\n",(0,a.jsx)(n.p,{children:"If you don't pass the tests yet, you'll need further adjustments."})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var s=t(96540);const a={},i=s.createContext(a);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);