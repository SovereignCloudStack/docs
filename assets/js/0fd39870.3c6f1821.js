"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[42140],{86062:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>d,metadata:()=>t,toc:()=>r});const t=JSON.parse('{"id":"operating-scs/components/status-page-api/docs/requests","title":"Requests","description":"As defined by the OpenAPI spec and status page OpenAPI decision the general API objects are used as request bodies and responses to generalize data structures. Not all object fields are handled by all requests, some are read only and some are write only. GET request wrap their return in a object field called data.","source":"@site/docs/04-operating-scs/components/status-page-api/docs/requests.md","sourceDirName":"04-operating-scs/components/status-page-api/docs","slug":"/operating-scs/components/status-page-api/docs/requests","permalink":"/docs/operating-scs/components/status-page-api/docs/requests","draft":false,"unlisted":false,"editUrl":"https://github.com/SovereignCloudStack/docs/tree/main/docs/04-operating-scs/components/status-page-api/docs/requests.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Configuration","permalink":"/docs/operating-scs/components/status-page-api/docs/configuration"},"next":{"title":"Example requests","permalink":"/docs/operating-scs/components/status-page-api/docs/example-requests"}}');var a=s(74848),i=s(28453);const d={},o="Requests",c={},r=[{value:"Phases",id:"phases",level:2},{value:"Impact types",id:"impact-types",level:2},{value:"Severities",id:"severities",level:2},{value:"Components",id:"components",level:2},{value:"Incidents",id:"incidents",level:2},{value:"Incident update",id:"incident-update",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"requests",children:"Requests"})}),"\n",(0,a.jsxs)(n.p,{children:["As defined by the ",(0,a.jsx)(n.a,{href:"https://github.com/SovereignCloudStack/status-page-openapi",children:"OpenAPI spec"})," and ",(0,a.jsx)(n.a,{href:"https://github.com/SovereignCloudStack/standards/blob/main/Standards/scs-0402-v1-status-page-openapi-spec-decision.md",children:"status page OpenAPI decision"})," the general API objects are used as request bodies and responses to generalize data structures. Not all object fields are handled by all requests, some are read only and some are write only. ",(0,a.jsx)(n.code,{children:"GET"})," request wrap their return in a object field called ",(0,a.jsx)(n.code,{children:"data"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["Please refer to ",(0,a.jsx)(n.a,{href:"/docs/operating-scs/components/status-page-api/docs/example-requests",children:"example requests"})," to see these request in action."]}),"\n",(0,a.jsx)(n.h2,{id:"phases",children:"Phases"}),"\n",(0,a.jsxs)(n.p,{children:["Phases are always handled as lists, so ",(0,a.jsx)(n.code,{children:"GET"})," as well as ",(0,a.jsx)(n.code,{children:"POST"})," operations on phases always require the full list. When getting the phase list, it's accompanied be a generation annotation."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json5",children:'{\n  "generation": 1, // omitted on POST and PATCH\n  "phases": [\n    "Phase 1",\n    "Phase 2",\n    "Pahse 3"\n  ]\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"impact-types",children:"Impact types"}),"\n",(0,a.jsxs)(n.p,{children:["Requesting (",(0,a.jsx)(n.code,{children:"GET"}),") an impact type, will return all fields, while ",(0,a.jsx)(n.code,{children:"POST"})," and ",(0,a.jsx)(n.code,{children:"PATCH"})," operations omit the ",(0,a.jsx)(n.code,{children:"id"})," field."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json5",children:'{\n  "id": "UUID", // omit on POST and PATCH\n  "description": "Description of the impact type.",\n  "displayName": "Name"\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"severities",children:"Severities"}),"\n",(0,a.jsxs)(n.p,{children:["For all request types (",(0,a.jsx)(n.code,{children:"GET"}),", ",(0,a.jsx)(n.code,{children:"POST"}),", ",(0,a.jsx)(n.code,{children:"PATCH"}),"), all fields of the severity are handled."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "displayName": "string",\n  "value": 100\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["As ",(0,a.jsx)(n.code,{children:"displayName"})," is the identifier it must be unique, even when modified by ",(0,a.jsx)(n.code,{children:"PATCH"})]}),"\n",(0,a.jsx)(n.h2,{id:"components",children:"Components"}),"\n",(0,a.jsxs)(n.p,{children:["When ",(0,a.jsx)(n.code,{children:"GET"}),"ing a component, all fields can be expected to be filled, while requests for ",(0,a.jsx)(n.code,{children:"POST"})," (creation) and ",(0,a.jsx)(n.code,{children:"PATCH"})," operations only handle certain fields."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json5",children:'{\n  "id": "UUID", // omitted on POST and PATCH\n  "activelyAffectedBy": [ // omitted on POST and PATCH\n    {\n      "reference": "Incident-UUID",\n      "severity": 100,\n      "type": "ImpactType-UUID"\n    }\n  ],\n  "displayName": "Name",\n  "labels": {\n    "key": "value",\n  }\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"incidents",children:"Incidents"}),"\n",(0,a.jsx)(n.p,{children:"It is expected that incidents are the most used API object and have the most data to transmit."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json5",children:'{\n  "id": "UUID", // omitted on POST and PATCH\n  "affects": [\n    {\n      "reference": "Component-UUID",\n      "severity": 100,\n      "type": "ImpactType-UUID"\n    }\n  ],\n  "beganAt": "2024-01-01T06:00:00.000Z",\n  "description": "Description of the incident.",\n  "displayName": "Name",\n  "endedAt": "2024-01-01T08:00:00.000Z", // or null, when incident is still ongoing.\n  "phase": {\n    "generation": 1,\n    "order": 1\n  },\n  "updates": [ // omitted on POST and PATCH\n    0,\n    1,\n    2\n  ]\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"affects"})," field can, in theory, have as many entries as there are components. The ",(0,a.jsx)(n.code,{children:"updates"})," field is an ongoing list of updates. All changes to ",(0,a.jsx)(n.code,{children:"phase"})," should correlate to an update."]}),"\n",(0,a.jsxs)(n.p,{children:["When performing ",(0,a.jsx)(n.code,{children:"POST"})," or ",(0,a.jsx)(n.code,{children:"PATCH"})," operations on incidents the ",(0,a.jsx)(n.code,{children:"affects"})," field is of utmost importance, as it creates the ",(0,a.jsx)(n.strong,{children:"impact"}),". Only when referencing a component to an incident via the ",(0,a.jsx)(n.code,{children:"affects"})," field, an impact is created, that can be retrieved via the affected component."]}),"\n",(0,a.jsx)(n.h2,{id:"incident-update",children:"Incident update"}),"\n",(0,a.jsxs)(n.p,{children:["Whenever an incident changes, an update should be issued. When doing a ",(0,a.jsx)(n.code,{children:"GET"})," request, the ",(0,a.jsx)(n.code,{children:"order"})," field is filled, updates should be displayed in ascending order."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json5",children:'{\n  "order": 0, // omitted on POST and PATCH\n  "createdAt": "2024-01-01T06:15:00.000Z",\n  "description": "Description of the update.",\n  "displayName": "Name"\n}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>d,x:()=>o});var t=s(96540);const a={},i=t.createContext(a);function d(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:d(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);