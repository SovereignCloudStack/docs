"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[42456],{92599:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"operations/operations/zuul-ci-cd-quickstart-user-guide","title":"Zuul users guide","description":"Prerequisites","source":"@site/contributor-docs/operations/operations/zuul-ci-cd-quickstart-user-guide.md","sourceDirName":"operations/operations","slug":"/operations/operations/zuul-ci-cd-quickstart-user-guide","permalink":"/contributor-docs/operations/operations/zuul-ci-cd-quickstart-user-guide","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"devDocs","previous":{"title":"OpenStack Federation via OpenID-Connect","permalink":"/contributor-docs/operations/iam/openstack-federation-via-oidc"}}');var s=t(74848),o=t(28453);const r={},l="Zuul users guide",a={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Who is it for?",id:"who-is-it-for",level:2},{value:"Where do I start?",id:"where-do-i-start",level:2},{value:"Where to save the Zuul relevant data?",id:"where-to-save-the-zuul-relevant-data",level:2},{value:"Projects",id:"projects",level:3},{value:"Pipelines",id:"pipelines",level:3},{value:"1. check",id:"1-check",level:4},{value:"2. gate",id:"2-gate",level:4},{value:"3. post",id:"3-post",level:4},{value:"4. tag",id:"4-tag",level:4},{value:"5. e2e-test",id:"5-e2e-test",level:4},{value:"6. e2e-quick-test",id:"6-e2e-quick-test",level:4},{value:"7. unlabel-on-update-e2e-test",id:"7-unlabel-on-update-e2e-test",level:4},{value:"8. unlabel-on-update-e2e-quick-test",id:"8-unlabel-on-update-e2e-quick-test",level:4},{value:"9. periodic-hourly",id:"9-periodic-hourly",level:4},{value:"10. periodic-daily",id:"10-periodic-daily",level:4},{value:"11. compliance_check",id:"11-compliance_check",level:4},{value:"Reports",id:"reports",level:3},{value:"Jobs",id:"jobs",level:3},{value:"What about secrets?",id:"what-about-secrets",level:4},{value:"Let&#39;s put it all together",id:"lets-put-it-all-together",level:4}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"zuul-users-guide",children:"Zuul users guide"})}),"\n",(0,s.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Repository is known by ",(0,s.jsx)(n.a,{href:"https://zuul.scs.community",children:"SCS Zuul"})]}),"\n",(0,s.jsx)(n.li,{children:"Basic ansible knowledge"}),"\n",(0,s.jsx)(n.li,{children:"Basic yaml knowledge"}),"\n",(0,s.jsxs)(n.li,{children:["zuul-client installed (Only if you want to create secrets. ",(0,s.jsx)(n.a,{href:"#what-about-secrets",children:"See also"}),")"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Check ",(0,s.jsx)(n.a,{href:"https://zuul.scs.community/t/SCS/projects",children:"SCS Zuul projects"})," for your repository to\nbe available. If it is missing you need an administrator to get your repository\nconfigured to Zuul."]}),"\n",(0,s.jsx)(n.h2,{id:"who-is-it-for",children:"Who is it for?"}),"\n",(0,s.jsx)(n.p,{children:"You may have heard about Zuul and may ask yourself if it is capable to support you.\nBasically everything you use ansible for can be done using Zuul. That is not always\na good thing since you may get careless and your workload will exceed the CI/CD concept."}),"\n",(0,s.jsx)(n.p,{children:"If you find yourself doing things under the following list you are at the right place."}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Code testing"}),"\n",(0,s.jsx)(n.li,{children:"Deployment tests using IaC"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"If you want to, let's say, monitor something using Zuul, that is possible but not the\nintended use case."}),"\n",(0,s.jsx)(n.h2,{id:"where-do-i-start",children:"Where do I start?"}),"\n",(0,s.jsx)(n.p,{children:"Right in your project's repository! The only prerequisite is that\nyour repository you want Zuul to work on is known by Zuul. This is done by the Zuul's\ntenant configuration. To update this configuration you need access to the Zuul instance\nor ask an administrator for help."}),"\n",(0,s.jsx)(n.p,{children:'We assume that Zuul knows about your repository so we can get started. There are three\ntopics that you should know about. To get jobs running you need the "job" itself. Jobs run\nwithin a "pipeline". The third important thing is to provide a "project" definition.'}),"\n",(0,s.jsx)(n.h2,{id:"where-to-save-the-zuul-relevant-data",children:"Where to save the Zuul relevant data?"}),"\n",(0,s.jsx)(n.p,{children:'Zuul will parse all branches of the untrusted repositories that Zuul knows about.\nYour repository is most likely an untrusted one since only the configuration repositories should\nhave the "trusted" state.\nSo it doesn\'t matter whether you have just one branch containing Zuul files or all branches. Zuul\nis looking for the following pathes on your repositories root.'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"./zuul.yaml # everything is in here\n\n./.zuul.yaml # ... or here\n\n./zuul.d/ # use directory style to get a bit of a structure\n\u251c\u2500\u2500 jobs.yaml\n\u2514\u2500\u2500 project.yaml\n\n./.zuul.d/ # the same as before just hidden\n\u251c\u2500\u2500 jobs.yaml\n\u2514\u2500\u2500 project.yaml\n"})}),"\n",(0,s.jsx)(n.p,{children:"Just use exactly one of the four possibilities."}),"\n",(0,s.jsxs)(n.p,{children:["If using the directory style configuration all ",(0,s.jsx)(n.code,{children:"yaml"})," files within this directory will be\nprocessed. If your projects configuration is small enough you may put all information in\na single file called ",(0,s.jsx)(n.code,{children:"zuul.yaml"}),". It is also possible to create the file or the directory\nwith a leading dot to hide them for non zuul related work within the repository."]}),"\n",(0,s.jsx)(n.h3,{id:"projects",children:"Projects"}),"\n",(0,s.jsx)(n.p,{children:"If Zuul is configured to observe your repository it will have a look at your projects\ndefinition. Minimal example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'- project:\n    name: my-org/my-repo\n    default-branch: main\n    merge-mode: "squash-merge"\n    my_pipeline1:\n      jobs:\n        - my_job1\n        - my_job2\n        ......\n    my_pipeline2:\n      jobs:\n        - my_jobs\n    ...\n\n'})}),"\n",(0,s.jsx)(n.p,{children:"By default Zuul will observe all branches for such files. We have to set the repository name\nthat have to match the exact value that was set for Zuul. Set a default-branch where actions\nthat don't match an explicit branch are executed on. Set the merge-mode that Zuul has to use.\nBut beware that not all issue tracker support all methods. For github squash-merge will work."}),"\n",(0,s.jsxs)(n.p,{children:["After these three properties add the pipelines you want to use to the project definition.\nWith the ",(0,s.jsx)(n.code,{children:"jobs"})," list you define which jobs to run in which pipeline."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://zuul-ci.org/docs/zuul/latest/config/project.html",children:"See official documentation"})}),"\n",(0,s.jsx)(n.h3,{id:"pipelines",children:"Pipelines"}),"\n",(0,s.jsx)(n.p,{children:"Every Zuul instance will have at least one repository that is used for configuration. There\nyou will find the available pipelines. Pipelines are used to run your jobs on a periodic or\nevent driven base. Pipelines can be used to run other pipelines and to keep your jobs in a\ndefined order if you need this."}),"\n",(0,s.jsxs)(n.p,{children:["Have a look at the configuration repository to utilize the pipelines for your repository.\nSee available ",(0,s.jsx)(n.a,{href:"https://github.com/SovereignCloudStack/zuul-config/blob/main/zuul.d/gh_pipelines.yaml",children:"pipelines"}),' for SCS.\nYou are not able to define new pipelines outside of a so called "configuration" repository. Since,\nby default your repo is considered "untrusted". So in the first place you don\'t need to\nthink about, how to create a pipeline. Just use one that fits your needs as close as possible. Next you will\nfind an enumeration and a small description about the available pipelines in SCS Zuul.']}),"\n",(0,s.jsx)(n.p,{children:"Pipelines available in SCS Zuul:"}),"\n",(0,s.jsx)(n.h4,{id:"1-check",children:"1. check"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"event driven pipeline"}),"\n",(0,s.jsx)(n.li,{children:"runs if a pull request is created, changed or reopened"}),"\n",(0,s.jsxs)(n.li,{children:["re-runs if a comment contains ",(0,s.jsx)(n.code,{children:"recheck"})]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"2-gate",children:"2. gate"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"event driven pipeline"}),"\n",(0,s.jsx)(n.li,{children:"trigger events: pull_request_review, pull_request, check_run"}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"3-post",children:"3. post"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"event driven pipeline"}),"\n",(0,s.jsx)(n.li,{children:"trigger event: post"}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"4-tag",children:"4. tag"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"event driven pipeline"}),"\n",(0,s.jsx)(n.li,{children:"trigger event: push"}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"5-e2e-test",children:"5. e2e-test"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"event driven pipeline"}),"\n",(0,s.jsx)(n.li,{children:"trigger event: pull_request"}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"6-e2e-quick-test",children:"6. e2e-quick-test"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"event driven pipeline"}),"\n",(0,s.jsx)(n.li,{children:"trigger event: pull_request"}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"7-unlabel-on-update-e2e-test",children:"7. unlabel-on-update-e2e-test"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"event driven pipeline"}),"\n",(0,s.jsx)(n.li,{children:"trigger event: pull_request"}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"8-unlabel-on-update-e2e-quick-test",children:"8. unlabel-on-update-e2e-quick-test"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"event driven pipeline"}),"\n",(0,s.jsx)(n.li,{children:"trigger event: pull_request"}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"9-periodic-hourly",children:"9. periodic-hourly"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"time based pipeline that runs every hour"}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"10-periodic-daily",children:"10. periodic-daily"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"time based pipeline that runs every day at 3 o'clock am."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"11-compliance_check",children:"11. compliance_check"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"time based pipeline that runs every 15 minutes"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["If you want to know more about pipelines: ",(0,s.jsx)(n.a,{href:"https://zuul-ci.org/docs/zuul/latest/config/pipeline.html",children:"See official documentation"})]}),"\n",(0,s.jsx)(n.h3,{id:"reports",children:"Reports"}),"\n",(0,s.jsxs)(n.p,{children:["The SCS Zuul instance can transmit build reports through an MQTT connection\nto the dedicated Matrix chat room ",(0,s.jsx)(n.code,{children:"SCS | Zuul Reports"}),". Currently, this MQTT reporting\nfeature is activated for periodic pipelines (periodic-hourly, periodic-daily,\ncompliance_check), and reports are dispatched solely in the event of\nfailures occurring in builds triggered by the mentioned pipelines."]}),"\n",(0,s.jsxs)(n.p,{children:["See an example pipeline that reports failed result to the ",(0,s.jsx)(n.code,{children:"SCS | Zuul Reports"})," Matrix room:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'- pipeline:\n    name: pipeline-that-reports-to-matrix\n    description: |\n      In the event of a failure, this pipeline transmits reports to\n      the SCS | Zuul Reports Matrix chat room.\n    failure:\n      mqtt:\n        topic: "zuul/{pipeline}/{project}/{branch}/{change}"\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Visit the ",(0,s.jsx)(n.a,{href:"https://zuul-ci.org/docs/zuul/latest/config/pipeline.html#reporters",children:"official Zuul documentation"}),"\nand explore the configuration options available for Zuul's reporters."]}),"\n",(0,s.jsx)(n.h3,{id:"jobs",children:"Jobs"}),"\n",(0,s.jsxs)(n.p,{children:["All jobs that your Zuul instances knows of can be used for your own purposes.\nCall them directly or implement a job that uses an existing job as parent.\nDidn't find the right job? Than we have to create a new one. Existing jobs\ncan be found in the web ui of your Zuul instance: ",(0,s.jsx)(n.a,{href:"https://zuul.scs.community/t/SCS/jobs",children:"Example"})]}),"\n",(0,s.jsx)(n.p,{children:"First have a look on a basic job example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"- job:\n    name: base\n    parent: null\n    description: |\n      The recommended base job.\n\n      All jobs ultimately inherit from this.  It runs a pre-playbook\n      which copies all of the job's prepared git repos on to all of\n      the nodes in the nodeset.\n\n      It also sets a default timeout value (which may be overidden).\n    pre-run: playbooks/base/pre.yaml\n    post-run:\n      - playbooks/base/post.yaml\n      - playbooks/base/post-logs.yaml\n    roles:\n      - zuul: zuul/zuul-jobs\n    timeout: 1800\n    nodeset:\n      nodes:\n        - name: ubuntu-jammy\n          label: ubuntu-jammy\n"})}),"\n",(0,s.jsx)(n.p,{children:'Each job needs a name that has to be unique within the whole tenant.\nA useful convention to achieve this is to prepend the name of the repository.\nEach job need to define whether there is parent job or not.\nJobs without a parent are called "base" jobs. Usually you don\'t want to implement base jobs since\nthere are already some base jobs that implement often used stuff. A description may not be mandatory\nbut is obviously useful.'}),"\n",(0,s.jsxs)(n.p,{children:["Necessary for Zuul to do anything you just need to add a ",(0,s.jsx)(n.code,{children:"run"})," or ",(0,s.jsx)(n.code,{children:"roles"})," property. Within a job that is\nlike a ",(0,s.jsx)(n.code,{children:"noop"})," job or just printing something to stdout that is everything you need to run your first job.\nSince anything we want to do requires a little bit more you have to define a nodeset. The nodes\nare used to run your playbooks on. In 99,9% you will need this too."]}),"\n",(0,s.jsxs)(n.p,{children:["The properties ",(0,s.jsx)(n.code,{children:"pre-run"})," and ",(0,s.jsx)(n.code,{children:"post-run"})," are useful for bootstrap and cleanup. If your actual job wants to create\nbootstrap some infrastructure you can to this in the ",(0,s.jsx)(n.code,{children:"pre-run"}),". Using an cloud provider you want to release\nno longer used resources. That can be done in the ",(0,s.jsx)(n.code,{children:"post-run"}),'. If you are using a parent job it is likely\nthat the parent job may has pre- and post-run playbooks. In this case your pre- and post-run playbooks are\n"nested". Example:']}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"pre-run parent"}),"\n",(0,s.jsx)(n.li,{children:"pre-run my job"}),"\n",(0,s.jsx)(n.li,{children:"post-run my job"}),"\n",(0,s.jsx)(n.li,{children:"post-run parent"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"If your job exceeds the defined timeout, the job is considered as failed."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://zuul-ci.org/docs/zuul/latest/config/job.html",children:"See official documentation"})}),"\n",(0,s.jsx)(n.h4,{id:"what-about-secrets",children:"What about secrets?"}),"\n",(0,s.jsx)(n.p,{children:"Right now you should be able to run basic tasks. But what if you try to test something\nthat needs credentials to connect to an outside service? Or you have to address additional\nressources in an openstack environment and you have to use something like app credentials?"}),"\n",(0,s.jsx)(n.p,{children:"That is where job secrets are used. Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"- job:\n    name: SOME_JOB\n    parent: base\n    description: |\n      A job basic job used as example\n    secrets:\n      - name: clouds_conf\n        secret: app_credential_cloud_conf\n    run: playbooks/my-playbook.yaml\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Secrets for a job are simply defined by the keyword ",(0,s.jsx)(n.code,{children:"secrets"}),".\nEach secret needs a name that can be used in your playbooks.\nThe property ",(0,s.jsx)(n.code,{children:"secret"})," references the secret that is defined within your project."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"ATTENTION!"})," If your job is using a secret ",(0,s.jsx)(n.code,{children:"job.post-review"})," is automatically\nset to ",(0,s.jsx)(n.code,{children:"true"}),". For untrusted projects, that means that your job is only called\nin piplines that have the ",(0,s.jsx)(n.code,{children:"pipeline.post-review"})," flag set to ",(0,s.jsx)(n.code,{children:"true"}),". In SCS context\nthat means you may run these jobs only with the pipelines ",(0,s.jsx)(n.code,{children:"tag"})," and ",(0,s.jsx)(n.code,{children:"post"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["If you want to run jobs on pipelines that have ",(0,s.jsx)(n.code,{children:"post-review"})," set to ",(0,s.jsx)(n.code,{children:"false"}),", which\nis default, and your job needs a secret, the secret may be defined in the zuul-config repository."]}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"- secret:\n    name: app_credential_cloud_conf\n    data:\n      credentials: my-secret-value\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Within ",(0,s.jsx)(n.code,{children:"my-playbook.yaml"})," you can reference the secret value using ",(0,s.jsx)(n.code,{children:'"{{ clouds_conf.credentials }}"'}),".\nIn this example ",(0,s.jsx)(n.code,{children:"my-secret-value"})," is clear readable text. That is not something we want to keep\nsecrets. But how do you encrypt secrets in a way that they are secure and also can be decrypted by\nZuul?"]}),"\n",(0,s.jsx)(n.p,{children:"For this purpose Zuul creates its own public/private key pair for each project. Everyone may use the\npublic key to create secrets. But only Zuul will be able to decrypt these values. To avoid the user\nto be responsible for the correct encryption there is an zuul-client tool that will do this for you."}),"\n",(0,s.jsx)(n.p,{children:"Example (reading from stdin and writing to stdout):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"zuul-client --zuul-url ZUUL_URL encrypt --tenant SCS --project SovereignCloudStack/REPO\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Add ",(0,s.jsx)(n.code,{children:"--infile INFILE"})," or ",(0,s.jsx)(n.code,{children:"--outfile OUTFILE"})," if you prefer to work with files directly."]}),"\n",(0,s.jsx)(n.p,{children:"The output might look like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"- secret:\n    name: <name>\n    data:\n      <fieldname>: !encrypted/pkcs1-oaep\n        - IGZ2Wu47R9mEY4fjetbxSAUGNaz4HR1mjk9lCLq3HsUMjHGj9YPlb2MvnPQw1LCJSvpaK\n          ogth7hi2zYwrs5tNAik/qlVSB7AM+LQRP7lmlM4JmD6WOyR7DisHu7oMD1Gqem2ZuMggA\n          DIBn5+DeBIvnwihDOcS+BKPTVMEtXOJNkuObZHE8DweB/RQIGUvjyeq5yoAmz/y+qGVqe\n          0Vk4pTYFIBgk5DMzwVnDzDkqs/QokoOupMUoBcpapmM11do4ymjbDpeINjayoro6VXTtX\n          Mkk9fDv9wuJIQTuyHAOfMD+UYS/HqVSF/Hm9ScUvfhw02gTdzKCxliWhFHJOj7RbdUUMK\n          OYYcUkNp5cXZUYFnflMhxVEnzREbdAIklNPfoHOizsxLPaUZ9yk6XcFRflFfMvqBtUS00\n          LCx0Uh906NwdaEUrv2ZdrN123rwfwfw4333232rDFDFfsdfddsfdDFSFSdqrrtwms5Mi0\n          szUBaM4j+Mayep+41vl0cpsLU91GzXEATWMaPIN8OnEHF6qQIv0wB6VaKd5aeAyERisb3\n          wFdjEo4faLO70RWzR33k+4xqAYNIIFyTMpWJz21CUSfoYG8ygL6t7RJGgyjA+0KsVEyj+\n          ewEtiaUOLYyD7pXtqdw1HgzjqiXnfxk+wSv/y5y/TGGYpQj8zU76jS7Zj0ft/0=\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You may use this content or the file to provide it as a secret. You just have to update the ",(0,s.jsx)(n.code,{children:"<name>"})," and the\n",(0,s.jsx)(n.code,{children:"<fieldname>"})," part."]}),"\n",(0,s.jsxs)(n.p,{children:["The secret name has to be unique across all projects. Because of this, we have a naming convention in the\n",(0,s.jsx)(n.code,{children:"SovereignCloudStack"})," organisation that ensures that a secret has a unique name."]}),"\n",(0,s.jsxs)(n.p,{children:["Our convention is as follows. There is only one secret per Zuul configuration per project (for exceptions,\nsee below). This secret always has a name in the form\n",(0,s.jsx)(n.code,{children:"SECRET_REPOSITORY_NAME"}),". For instance, if a secret in the ",(0,s.jsx)(n.code,{children:"SovereignCloudStack/k8s-cluster-api-provider"}),"\nrepository is\nto be used, it is given the name ",(0,s.jsx)(n.code,{children:"SECRET_K8S_CLUSTER_API_PROVIDER"}),". The name of the repository is\nalways written in capital letters. A dash is replaced with an underscore. Any number of values\n(",(0,s.jsx)(n.code,{children:"<fieldname>: !encrypted/pkcs1-oaep"}),") can then be assigned to this one secret."]}),"\n",(0,s.jsxs)(n.p,{children:["In certain cases, it can be undesireable to expose all secret information to all jobs in a project.\nThen additional secrets may be used, whose names have to be formed by appending an underscore and some\nupper-case prefix to the name of the primary secret. For instance, we might use the\nname ",(0,s.jsx)(n.code,{children:"SECRET_REPOSITORY_NAME_FOOBAR"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Official documentation:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://zuul-ci.org/docs/zuul/latest/config/secret.html#secret",children:"Secrets documentation"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://zuul-ci.org/docs/zuul/latest/project-config.html#encryption",children:"Encryption documentation"})}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"lets-put-it-all-together",children:"Let's put it all together"}),"\n",(0,s.jsxs)(n.p,{children:["For a basic but working example the following content may be written into a ",(0,s.jsx)(n.code,{children:"zuul.yaml"})," file."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'# zuul.yaml content\n---\n- secret:\n    name: SECRET_REPOSITORY_NAME\n    data:\n      secretValue1: !encrypted/pkcs1-oaep\n        - <ENCRYPTED_DATA>\n      secretValue2: !encrypted/pkcs1-oaep\n        - <ENCRYPTED_DATA>\n      secretValue3: !encrypted/pkcs1-oaep\n        - <ENCRYPTED_DATA>\n\n- job:\n    name: myFirstTestJob\n    parent: base\n    secrets:\n      - name: secretName # The name of the secret that is used within "playbooks/testPlaybook.yaml"\n        secret: SECRET_REPOSITORY_NAME\n    run: playbooks/testPlaybook.yaml\n\n- job:\n    name: mySecondTestJob\n    parent: base\n    run: playbooks/testPlaybookTwo.yaml\n\n- project:\n    tag:\n      jobs:\n        - myFirstTestJob\n    check:\n      jobs:\n        - mySecondTestJob\n'})}),"\n",(0,s.jsxs)(n.p,{children:["This will run the job ",(0,s.jsx)(n.code,{children:"myFirstTestJob"})," whenever the ",(0,s.jsx)(n.code,{children:"tag"})," pipeline is triggered, and\n",(0,s.jsx)(n.code,{children:"mySecondTestJob"})," whenever ",(0,s.jsx)(n.code,{children:"check"})," is triggered."]}),"\n",(0,s.jsxs)(n.p,{children:["Within SCS the ",(0,s.jsx)(n.code,{children:"check"})," pipeline is always triggered if you open, change or reopen a pull request.\nThis pipeline can also be triggered manually if you write a comment on an already\nexisting pull request and place the string ",(0,s.jsx)(n.code,{children:"recheck"})," in it."]}),"\n",(0,s.jsxs)(n.p,{children:["Recall that the first test job cannot run on the same pipeline because it uses a secret.\nThe ",(0,s.jsx)(n.code,{children:"tag"})," pipeline is run whenever a new tag is created."]}),"\n",(0,s.jsx)(n.p,{children:"The path to you playbook is always the full path within the repository. The playbook\ncontains the tasks you actually want to run on all or a specific subset of nodes.\nExample playbook:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# playbooks/testPlaybook.yaml content\n---\n- hosts: all\n  tasks:\n    - debug:\n        msg: 'Debug print my secrets! {{ secretName.secretValue1 }}' # do not do this as it will expose your secrets\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var i=t(96540);const s={},o=i.createContext(s);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);