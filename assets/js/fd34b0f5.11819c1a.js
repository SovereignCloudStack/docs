"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[58329],{8124:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"iam/iaas-roles","title":"IaaS Roles","description":"An SCS-compliant cloud offers the following roles on the Infrastructure as a Service (IaaS) layer:","source":"@site/docs/05-iam/iaas-roles.md","sourceDirName":"05-iam","slug":"/iam/iaas-roles","permalink":"/docs/iam/iaas-roles","draft":false,"unlisted":false,"editUrl":"https://github.com/SovereignCloudStack/docs/tree/main/docs/05-iam/iaas-roles.md","tags":[],"version":"current","frontMatter":{}}');var i=n(74848),t=n(28453);const l={},o="IaaS Roles",d={},a=[{value:"Role Assignment",id:"role-assignment",level:2},{value:"Scopes &amp; Targets",id:"scopes--targets",level:3},{value:"Assignment Procedure",id:"assignment-procedure",level:3}];function c(e){const s={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"iaas-roles",children:"IaaS Roles"})}),"\n",(0,i.jsx)(s.p,{children:"An SCS-compliant cloud offers the following roles on the Infrastructure as a Service (IaaS) layer:"}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Role"}),(0,i.jsx)(s.th,{children:"Scope"}),(0,i.jsx)(s.th,{children:"Description"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"reader"}),(0,i.jsx)(s.td,{children:"All OpenStack APIs"}),(0,i.jsx)(s.td,{children:"Role with read-only access within authentication scope."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"member"}),(0,i.jsx)(s.td,{children:"All OpenStack APIs"}),(0,i.jsx)(s.td,{children:"Role with read-write access within authentication scope."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"manager"}),(0,i.jsx)(s.td,{children:"Identity API"}),(0,i.jsx)(s.td,{children:"Role with self-service capabilites for the Identity API in domain scope."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"admin"}),(0,i.jsx)(s.td,{children:"All OpenStack APIs"}),(0,i.jsx)(s.td,{children:"Most privileged role, reserved for CSP personnel, to administer the OpenStack cloud"})]})]})]}),"\n",(0,i.jsxs)(s.admonition,{title:"Role Inheritance",type:"info",children:[(0,i.jsx)(s.p,{children:"The OpenStack Identity API implements automatic role inheritance between admin, manager, member and reader roles where a role with higher privileges inherits all lesser roles automatically."}),(0,i.jsx)(s.p,{children:"This means:"}),(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"admin"})," inherits ",(0,i.jsx)(s.code,{children:"manager"}),", ",(0,i.jsx)(s.code,{children:"member"})," and ",(0,i.jsx)(s.code,{children:"reader"})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"manager"})," inherits ",(0,i.jsx)(s.code,{children:"member"})," and ",(0,i.jsx)(s.code,{children:"reader"})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"member"})," inherits ",(0,i.jsx)(s.code,{children:"reader"})]}),"\n"]})]}),"\n",(0,i.jsx)(s.h2,{id:"role-assignment",children:"Role Assignment"}),"\n",(0,i.jsx)(s.h3,{id:"scopes--targets",children:"Scopes & Targets"}),"\n",(0,i.jsx)(s.p,{children:"Roles can be assigned in different scopes and either to users or groups.\nThis leads to the following role assignment matrix:"}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{}),(0,i.jsx)(s.th,{children:"User"}),(0,i.jsx)(s.th,{children:"Group"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Project"}),(0,i.jsx)(s.td,{children:"single user, permissions in project"}),(0,i.jsx)(s.td,{children:"all users of group, permissions in project"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Domain"}),(0,i.jsx)(s.td,{children:"single user, permissions in domain"}),(0,i.jsx)(s.td,{children:"all users of group, permissions in domain"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"System"}),(0,i.jsx)(s.td,{children:"single user, permissions in whole cloud"}),(0,i.jsx)(s.td,{children:"all users of group, permissions in whole cloud"})]})]})]}),"\n",(0,i.jsx)(s.p,{children:"(rows are the scopes and columns are the role assignment target entities)"}),"\n",(0,i.jsx)(s.h3,{id:"assignment-procedure",children:"Assignment Procedure"}),"\n",(0,i.jsx)(s.p,{children:"Roles are assigned to users or groups by administrative personnel.\nIn most cases, this is either:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"a cloud operator with the admin role, belonging to the provider"}),"\n",(0,i.jsx)(s.li,{children:"a domain manager with the manager role in domain scope, belonging to the provider or a tenant"}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:"A domain manager can only assign and revoke roles within their own domain and is restricted to a specific subset of available roles to prevent privilege escalation."})]})}function h(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>l,x:()=>o});var r=n(96540);const i={},t=r.createContext(i);function l(e){const s=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),r.createElement(t.Provider,{value:s},e.children)}}}]);