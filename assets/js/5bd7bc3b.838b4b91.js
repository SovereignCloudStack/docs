"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[70643],{5549:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>r,contentTitle:()=>d,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"iaas/guides/operations-guide/index","title":"Operations Guide","description":"Change Node states","source":"@site/docs/02-iaas/guides/operations-guide/index.md","sourceDirName":"02-iaas/guides/operations-guide","slug":"/iaas/guides/operations-guide/","permalink":"/docs/iaas/guides/operations-guide/","draft":false,"unlisted":false,"editUrl":"https://github.com/SovereignCloudStack/docs/tree/main/docs/02-iaas/guides/operations-guide/index.md","tags":[],"version":"current","sidebarPosition":30,"frontMatter":{"sidebar_label":"Operations Guide","sidebar_position":30},"sidebar":"docs","previous":{"title":"Validations","permalink":"/docs/iaas/guides/configuration-guide/validations/"},"next":{"title":"Manager","permalink":"/docs/iaas/guides/operations-guide/manager/"}}');var t=s(74848),o=s(28453);const a={sidebar_label:"Operations Guide",sidebar_position:30},d="Operations Guide",r={},c=[{value:"Change Node states",id:"change-node-states",level:2},{value:"Maintenance",id:"maintenance",level:3},{value:"Bootstrap",id:"bootstrap",level:3},{value:"Manage services",id:"manage-services",level:2},{value:"Manage containers",id:"manage-containers",level:2},{value:"Reboot nodes",id:"reboot-nodes",level:2},{value:"Working with the OOB Board via IPMI",id:"working-with-the-oob-board-via-ipmi",level:2},{value:"Display the IP address",id:"display-the-ip-address",level:3}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"operations-guide",children:"Operations Guide"})}),"\n",(0,t.jsx)(n.h2,{id:"change-node-states",children:"Change Node states"}),"\n",(0,t.jsx)(n.p,{children:"A node can be in different states. Depending on the state, different actions\nare possible or are triggered."}),"\n",(0,t.jsx)(n.p,{children:"The individual states of a node can be retrieved via Ansible Facts and local\nfiles on the node itself."}),"\n",(0,t.jsx)(n.h3,{id:"maintenance",children:"Maintenance"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"osism set maintenance NODE\nosism noset maintenance NODE\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Ansible fact: ",(0,t.jsx)(n.code,{children:"ansible_local.osism.maintenance"})]}),"\n",(0,t.jsxs)(n.li,{children:["State file: ",(0,t.jsx)(n.code,{children:"/etc/osism/maintenance"})]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"bootstrap",children:"Bootstrap"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"osism set bootstrap NODE\nosism noset bootstrap NODE\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Ansible fact: ",(0,t.jsx)(n.code,{children:"ansible_local.osism.bootstrap"})]}),"\n",(0,t.jsxs)(n.li,{children:["State file: ",(0,t.jsx)(n.code,{children:"/etc/osism/bootstrap"})]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"manage-services",children:"Manage services"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"osism apply manage-service \\\n  -e service_name=rsyslog \\\n  -e service_state=restarted\n"})}),"\n",(0,t.jsx)(n.h2,{id:"manage-containers",children:"Manage containers"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"osism apply manage-container \\\n  -e container_name=nova_compute \\\n  -e container_action=restart\n"})}),"\n",(0,t.jsx)(n.h2,{id:"reboot-nodes",children:"Reboot nodes"}),"\n",(0,t.jsx)(n.p,{children:"When using reboot play, the node is rebooted directly. It is not ensured in\nadvance that there is no more payload on the node and no services etc. are\ndisabled."}),"\n",(0,t.jsxs)(n.p,{children:["Reboot node ",(0,t.jsx)(n.code,{children:"testbed-node-0.testbed.osism.xyz"})," and wait until the reboot has\nbeen completed and the system is accessible again."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"osism apply reboot \\\n  -e reboot_wait=True \\\n  -e ireallymeanit=yes \\\n  -l testbed-node-0.testbed.osism.xyz\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Reboot node ",(0,t.jsx)(n.code,{children:"testbed-node-0.testbed.osism.xyz"})," and do not wait for the reboot\nto complete."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"osism apply reboot \\\n  -e ireallymeanit=yes \\\n  -l testbed-node-0.testbed.osism.xyz\n"})}),"\n",(0,t.jsx)(n.h2,{id:"working-with-the-oob-board-via-ipmi",children:"Working with the OOB Board via IPMI"}),"\n",(0,t.jsx)(n.h3,{id:"display-the-ip-address",children:"Display the IP address"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"$ sudo ipmitool lan print | grep 'IP Address'\nIP Address Source       : DHCP Address\nIP Address              : 10.10.0.100\n"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>d});var i=s(96540);const t={},o=i.createContext(t);function a(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);