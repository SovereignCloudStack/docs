"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[82434],{2318:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"scs-0126-v1-provider-networks","title":"SCS Provider Network Standard","description":"Introduction","source":"@site/standards/scs-0126-v1-provider-networks.md","sourceDirName":".","slug":"/scs-0126-v1-provider-networks","permalink":"/standards/scs-0126-v1-provider-networks","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"SCS Provider Network Standard","type":"Standard","status":"Draft","track":"IaaS"},"sidebar":"standards","previous":{"title":"scs-0126: SCS Provider Network Standard","permalink":"/standards/iaas/scs-0126"},"next":{"title":"W1","permalink":"/standards/scs-0126-w1-provider-networks-implementation"}}');var o=r(74848),s=r(28453);const a={title:"SCS Provider Network Standard",type:"Standard",status:"Draft",track:"IaaS"},i=void 0,d={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Glossary",id:"glossary",level:3},{value:"Motivation",id:"motivation",level:2},{value:"Design Considerations",id:"design-considerations",level:2},{value:"Provider Network Access Control",id:"provider-network-access-control",level:3},{value:"Address Allocation and Routing",id:"address-allocation-and-routing",level:3},{value:"Port Security and Spoofing",id:"port-security-and-spoofing",level:3},{value:"Options considered",id:"options-considered",level:3},{value:"Public IP Address Allocation",id:"public-ip-address-allocation",level:4},{value:"IPv6",id:"ipv6",level:4},{value:"Single Default Provider Network",id:"single-default-provider-network",level:4},{value:"Shared Provider Network",id:"shared-provider-network",level:4},{value:"External Provider Network and Subnet Allocation",id:"external-provider-network-and-subnet-allocation",level:4},{value:"NAT and Floating IPs",id:"nat-and-floating-ips",level:4},{value:"Support for Auto-Allocation",id:"support-for-auto-allocation",level:4},{value:"Disable Networking RBAC for Users",id:"disable-networking-rbac-for-users",level:4},{value:"Required API extensions",id:"required-api-extensions",level:4},{value:"Standard",id:"standard",level:2},{value:"External Addresses",id:"external-addresses",level:3},{value:"Standard Provider Network",id:"standard-provider-network",level:3},{value:"IPv6 Allocation",id:"ipv6-allocation",level:3},{value:"IPv4 Allocation",id:"ipv4-allocation",level:3},{value:"RBAC Restrictions",id:"rbac-restrictions",level:3},{value:"Conformance Tests",id:"conformance-tests",level:2},{value:"References",id:"references",level:2}];function c(e){const t={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",section:"section",strong:"strong",sup:"sup",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,o.jsx)(t.p,{children:"Many use-cases of IaaS require virtual servers to be able to connect to network resources outside of the cloud environment, often to the internet.\nOpenStack supports this by allowing CSPs to map non-virtualized networks onto specific virtual networks, such that virtual routers and servers can connect to them."}),"\n",(0,o.jsxs)(t.p,{children:["Such networks will usually be created in a provider-managed project and then shared to user projects using access control features of the Networking API.\nBecause they have to be set up by the cloud provider, networks of this type are generally referred to as ",(0,o.jsx)(t.em,{children:"provider networks"}),", though that term can also be used in a broader sense to refer to other types of CSP-managed virtual networks."]}),"\n",(0,o.jsx)(t.p,{children:"When setting up provider networks for external access, CSPs have a number of different options regarding usage restrictions and the allocation of IP addresses.\nThis document defines a standardized approach for using provider networks to allocate public IP addresses and provide external access in a way that is portable across SCS clouds."}),"\n",(0,o.jsx)(t.h3,{id:"glossary",children:"Glossary"}),"\n",(0,o.jsx)(t.p,{children:"The following terms are used throughout this document:"}),"\n",(0,o.jsxs)(t.table,{children:[(0,o.jsx)(t.thead,{children:(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.th,{children:"Term"}),(0,o.jsx)(t.th,{children:"Meaning"})]})}),(0,o.jsxs)(t.tbody,{children:[(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"CSP"}),(0,o.jsx)(t.td,{children:"Cloud Service Provider, provider managing the OpenStack infrastructure."})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"Server"}),(0,o.jsx)(t.td,{children:"Server object in the OpenStack Compute API, usually represents a virtual machine, though there are also compute drivers for containers and bare metal servers."})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"Virtual Network"}),(0,o.jsx)(t.td,{children:"A virtualized network managed by OpenStack, provides connectivity between servers and other network resources, such as virtual routers."})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"Virtual Router"}),(0,o.jsx)(t.td,{children:"OpenStack resource that can be used to route and bridge between virtual networks and provide other features such as NAT."})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"Subnet"}),(0,o.jsx)(t.td,{children:"Subdivision of available IP address space using address prefixes. In OpenStack also an abstraction for controlling IP address allocation in a virtual network."})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"DHCP"}),(0,o.jsx)(t.td,{children:"Dynamic Host Configuration Protocol: Used to automatically configure hosts in a network with IP addresses, default routes, and other information such as DNS servers."})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"Prefix"}),(0,o.jsxs)(t.td,{children:["IP address prefix of a given bit-length N, written as ",(0,o.jsx)(t.em,{children:"ADDRESS/N"}),". Divides addresses into a network and a host part, a shorter prefix allows more hosts but takes up more address space."]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"NAT"}),(0,o.jsx)(t.td,{children:"Network Address Translation: mapping (usually public) IPv4 addresses onto a different (usually private) address space. May allows multiple hosts to share a public address by multiplexing TCP/UDP ports."})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"Networking RBAC"}),(0,o.jsx)(t.td,{children:"A mechanism in the Networking API to give projects limited access to resources owned by other projects. Used by CSPs to create provider networks. Not to be confused with the role-based access control of OpenStack's policy mechanism."})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"Shared Network"}),(0,o.jsx)(t.td,{children:"Virtual network that is shared between projects in a way that allows direct attachment of servers."})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"External Network"}),(0,o.jsx)(t.td,{children:"Virtual network that is shared between projects in a way that only allows virtual routers to use it as external gateway. Typically used by CSPs to provide access to networks outside of the cloud environment."})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"Provider Network"}),(0,o.jsx)(t.td,{children:"A CSP-managed virtual network made available to projects as either shared or external, typically connected to non-virtualized infrastructure."})]})]})]}),"\n",(0,o.jsx)(t.h2,{id:"motivation",children:"Motivation"}),"\n",(0,o.jsx)(t.p,{children:"The ability to interface virtualised resources with networks outside of the cloud environment, such as the internet, is an important part of IaaS.\nProviding external access in an OpenStack cloud requires a number of configuration choices from the CSP, some of which have direct implications on how users interact with the cloud.\nThis standard identifies some of these options and defines a baseline setup that provides flexibility and consistency to users but is also realistic to implement for CSPs."}),"\n",(0,o.jsx)(t.h2,{id:"design-considerations",children:"Design Considerations"}),"\n",(0,o.jsx)(t.p,{children:"This section will provide some general background on OpenStack provider networks before considering specific options to standardize."}),"\n",(0,o.jsx)(t.h3,{id:"provider-network-access-control",children:"Provider Network Access Control"}),"\n",(0,o.jsx)(t.p,{children:"In OpenStack, ownership of resources is generally tracked through projects, and, as per default policy, only members of a project have access to its resources\nThis is also true for CSP-managed resources, such as provider networks, which have to be created in a CSP-internal project, and are initially only accessible in this project."}),"\n",(0,o.jsxs)(t.p,{children:["They can then be made available to other projects by using the Networking API's Role-based Access Control (",(0,o.jsx)(t.em,{children:"RBAC"}),") extension.\n(This is it's official name in the documentation, even though it isn't technically role-based. To avoid confusion with the actual RBAC of OpenStack's API authorization, it will in the following referred to as ",(0,o.jsx)(t.em,{children:"Networking RBAC"}),".)"]}),"\n",(0,o.jsxs)(t.p,{children:["Networking RBAC rules for virtual networks support the two actions ",(0,o.jsx)(t.code,{children:"access_as_external"})," and ",(0,o.jsx)(t.code,{children:"access_as_shared"}),", and can be created automatically on ",(0,o.jsx)(t.code,{children:"openstack network create"})," with the options ",(0,o.jsx)(t.code,{children:"--external"})," and ",(0,o.jsx)(t.code,{children:"--share"}),"."]}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"access_as_external"})," allows networks to be used as external gateway for virtual routers in the target projects. Such networks are in the following referred to as ",(0,o.jsx)(t.em,{children:"external networks"}),".\nExternal networks have some special properties, such as allowing the creation of floating IPs, which will be discussed in the next section."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"access_as_shared"})," allows networks to be attached directly to servers in the target projects. Such networks are in the following referred to as ",(0,o.jsx)(t.em,{children:"shared networks"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(t.p,{children:["The rules can be created with either a specific target project ID, or with a wild card (",(0,o.jsx)(t.code,{children:"*"}),") to target all projects.\nThey can also overlap, allowing a network to be both external and shared to the same target projects."]}),"\n",(0,o.jsx)(t.h3,{id:"address-allocation-and-routing",children:"Address Allocation and Routing"}),"\n",(0,o.jsx)(t.p,{children:"CSPs can assign a subnet to a provider network to supply connected servers or virtual routers with externally routable (e.g. public) IP addresses.\nThis works well for shared networks, where servers can be attached directly, but there is no quota option to limit the number of allocated addresses per project."}),"\n",(0,o.jsxs)(t.p,{children:["Making servers in a project-internal network externally accessible through a virtual router is a bit more complicated, though.\nOne option is for the user to create a subnet with an external IP range for the internal network, and then ask the CSP to configure a static route to the subnet via the gateway IP of a virtual router.\nThis is cumbersome to set up manually, but can be automated using the ",(0,o.jsx)(t.code,{children:"bgp"})," extension of the Networking API, which is currently implemented both by the ",(0,o.jsx)(t.code,{children:"neutron-dynamic-routing"})," project ",(0,o.jsx)(t.sup,{children:(0,o.jsx)(t.a,{href:"#user-content-fn-bgp",id:"user-content-fnref-bgp","data-footnote-ref":!0,"aria-describedby":"footnote-label",children:"1"})})," and by the ",(0,o.jsx)(t.code,{children:"ovn"})," mechanism driver when used with the ",(0,o.jsx)(t.code,{children:"ovn-bgp-agent"})," ",(0,o.jsx)(t.sup,{children:(0,o.jsx)(t.a,{href:"#user-content-fn-ovn-bgp",id:"user-content-fnref-ovn-bgp","data-footnote-ref":!0,"aria-describedby":"footnote-label",children:"2"})}),".\nFor users, this takes the form of a CSP-managed shared subnet pool, which they can use to create externally routable subnets, limited by a per-project quota."]}),"\n",(0,o.jsxs)(t.p,{children:["For IPv6, there is also the option of prefix delegation, where a DHCPv6 server automatically assigns an IPv6 prefix to a subnet when it connects to the external provider network ",(0,o.jsx)(t.sup,{children:(0,o.jsx)(t.a,{href:"#user-content-fn-pd",id:"user-content-fnref-pd","data-footnote-ref":!0,"aria-describedby":"footnote-label",children:"3"})}),".\nThis means that ports in the subnet can lose their addresses and get assigned new ones if the subnet is removed from the external network and later reattached.\nThe documentation at ",(0,o.jsx)(t.sup,{children:(0,o.jsx)(t.a,{href:"#user-content-fn-pd",id:"user-content-fnref-pd-2","data-footnote-ref":!0,"aria-describedby":"footnote-label",children:"3"})})," still marks prefix delegation as an experimental feature in Neutron and notes low test coverage."]}),"\n",(0,o.jsxs)(t.p,{children:["For IPv4, OpenStack virtual routers support source NAT, allowing all servers in the internal subnet to access the external network with the gateway IP of the virtual router.\nThey also support destination NAT in the form of floating IPs, addresses from the external network that can be mapped onto specific servers in the internal subnet to make them externally accessible.\nFloating IPs are allocated from a CSP-managed pool, and can be controlled by a per-project quota.\nThere is also a set of API extensions that allow more fine grained port-forwarding, mapping different TCP or UDP ports of a floating IP to different internal IP addresses ",(0,o.jsx)(t.sup,{children:(0,o.jsx)(t.a,{href:"#user-content-fn-pf",id:"user-content-fnref-pf","data-footnote-ref":!0,"aria-describedby":"footnote-label",children:"4"})}),"."]}),"\n",(0,o.jsx)(t.h3,{id:"port-security-and-spoofing",children:"Port Security and Spoofing"}),"\n",(0,o.jsxs)(t.p,{children:["OpenStack ports have the flag ",(0,o.jsx)(t.code,{children:"port_security_enabled"}),", that is set to true by default and can only be changed by the owner of the corresponding network.\nThe default value of that flag is controlled by a ",(0,o.jsx)(t.code,{children:"port_security_enabled"})," flag on the network.\nBesides enabling security groups for a port, it also enables a number of built-in spoofing protections."]}),"\n",(0,o.jsx)(t.p,{children:"Whether this flag is set is primarily of concern for shared provider networks, as users only have limited control over the gateway ports of virtual routers.\nA lack of spoofing protection in a shared network, however, does enable a number of attacks that a malicious user or compromised server could perform against other servers in the network, such as DHCP-spoofing or ARP-Poisoning."}),"\n",(0,o.jsx)(t.p,{children:"There are legitimate use-cases for networks without port security, such as the implementation of network function virtualisation (NFV) within a server (i.e. having a server perform the function of a virtual router).\nThis seems to be more of a niche use-case, however, and may warrant the creation of a project-specific provider network, rather than making all other projects vulnerable to spoofing attacks."}),"\n",(0,o.jsx)(t.h3,{id:"options-considered",children:"Options considered"}),"\n",(0,o.jsx)(t.h4,{id:"public-ip-address-allocation",children:"Public IP Address Allocation"}),"\n",(0,o.jsx)(t.p,{children:"For public clouds, external access generally means access to (and from) the internet, with allocation of public IP addresses.\nProviding a standardized approach for the allocation of public IP addresses is the main motivation for this standard."}),"\n",(0,o.jsx)(t.p,{children:"However, the SCS Standards are intended to be applicable not just to public clouds, but also to private or even air-gapped cloud environments which have different requirements for IP address allocation.\nOne way to reconcile these requirements would be to limit the scope the requirements of this standard to only apply to cloud environment that support the allocation of public IP addresses."}),"\n",(0,o.jsx)(t.p,{children:"There are common networking use-cases between public and private clouds, however, like the very common requirement to connect to virtual servers via SSH.\nFor users (or any automated tooling that users might deploy) to have a standardized way of connecting to virtual servers in their projects is very valuable, regardless of whether this access happens across the Internet or within an isolated internal network or VPN."}),"\n",(0,o.jsx)(t.p,{children:"So instead of standardizing allocation of public IP addresses for some clouds, it might be more useful to require the allocation of IP addresses that are reachable for API users in all clouds.\nPublic clouds can then have the additional requirement that those allocated addresses must also be public."}),"\n",(0,o.jsx)(t.h4,{id:"ipv6",children:"IPv6"}),"\n",(0,o.jsxs)(t.p,{children:["The OpenStack Networking API allows the creation of subnets with either IPv4 or IPv6 address ranges, as indicated by the ",(0,o.jsx)(t.code,{children:"ip_version"})," field.\nHowever, to allow external access to either, the CSP needs to provide projects with externally routable addresses for that IP version."]}),"\n",(0,o.jsx)(t.p,{children:"While it is possible (and common) for CSPs to provide both IPv4 and IPv6, the increasing scarcity (and cost) of IPv4 address space may at some point become a barrier to entry for new CSPs.\nMandatory support for IPv6 but not IPv4 addresses this problem, while also providing users with a consistent feature set across SCS clouds."}),"\n",(0,o.jsx)(t.h4,{id:"single-default-provider-network",children:"Single Default Provider Network"}),"\n",(0,o.jsx)(t.p,{children:"In principle, CSPs can create multiple provider networks for a number of reasons, for example to make cloud-internal shared services available to projects.\nServers can be connected to multiple networks, and connecting to additional provider networks would not interfere with their ability be externally accessible."}),"\n",(0,o.jsxs)(t.p,{children:["CSPs may also create multiple provider networks with different options for external access, such as separate networks for IPv4 and IPv6, or one external network for use with virtual routers and a separate shared network for direct connection.\nThis mostly just adds complexity to the setup, however, as a provider network can be both external and shared at the same time, and can even provide both IPv4 and IPv6 subnets in a dual stack setup ",(0,o.jsx)(t.sup,{children:(0,o.jsx)(t.a,{href:"#user-content-fn-ds",id:"user-content-fnref-ds","data-footnote-ref":!0,"aria-describedby":"footnote-label",children:"5"})}),"."]}),"\n",(0,o.jsx)(t.p,{children:"Another problem with multiple provider networks is that users may only be able to distinguish their respective function by their name."}),"\n",(0,o.jsx)(t.p,{children:"A single default provider network leaves no ambiguity by the user in this regard and is thus preferable from a standardization perspective."}),"\n",(0,o.jsx)(t.h4,{id:"shared-provider-network",children:"Shared Provider Network"}),"\n",(0,o.jsx)(t.p,{children:"A shared provider network has the benefit of being easy to use.\nServers can be attached directly and will be accessible immediately, without the requirement to create virtual routers, project-internal networks, subnets, or floating IPs."}),"\n",(0,o.jsx)(t.p,{children:"Users do have a higher control over server ports than they have over virtual router ports, so it is important to enable Neutrons port security feature on shared provider networks to prevent spoofing."}),"\n",(0,o.jsx)(t.p,{children:"The lack of address quota may be a problem if IPv4 is used and the number of available addresses is so limited that fairness between projects needs to be enforced.\nIn that case, CSPs may restrict the number of servers, routers, or ports to limit the addresses used by individual projects."}),"\n",(0,o.jsx)(t.h4,{id:"external-provider-network-and-subnet-allocation",children:"External Provider Network and Subnet Allocation"}),"\n",(0,o.jsx)(t.p,{children:"Creating a project-internal network to connect to an external provider network with a virtual router does take more effort than just using a shared network, but also offers some additional flexibility and control.\nIn an internal network, users have greater control over IP allocation and may also choose to disable port security.\nWith the FWaaS API extensions, they can also assign firewall rules to the virtual router, to control which traffic can pass between internal and provider networks."}),"\n",(0,o.jsx)(t.p,{children:"As described above, there are multiple methods for allocating external IP addresses to project-internal networks.\nFor IPv6, the currently best option seems to be subnet allocation from a CSP-managed subnet pool, because support for Prefix Delegation is still experimental.\nFor IPv4, NAT and floating IPs are generally preferred over subnet allocation because of scarcity of IPv4 address space."}),"\n",(0,o.jsx)(t.h4,{id:"nat-and-floating-ips",children:"NAT and Floating IPs"}),"\n",(0,o.jsx)(t.p,{children:"Subnets can only have a size that is a power of two, and will thus usually be oversized for the project.\nThey also need to reserve one address for the gateway and, if DHCP is used, one or more addresses for DHCP service ports.\nEach subnet also has a broadcast and a network address, which for small subnets make up a noticeable part of the address space."}),"\n",(0,o.jsx)(t.p,{children:"Source NAT, combined with selective use of floating IPs can significantly reduce the number of required addresses over a public IPv4 subnet.\nThe floating IP quota also offers a finer granularity for distributing IPs among projects, though it is important to note that the routers external gateway IP which is used for the source NAT is not subject to any quotas."}),"\n",(0,o.jsx)(t.p,{children:"IPv4 NAT can also be used in a dual stack setup alongside a routed IPv6 subnet."}),"\n",(0,o.jsx)(t.h4,{id:"support-for-auto-allocation",children:"Support for Auto-Allocation"}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"auto-allocated-topology"})," extension of the Networking API can be used to create a default network setup in a project with a single API call ",(0,o.jsx)(t.sup,{children:(0,o.jsx)(t.a,{href:"#user-content-fn-aa",id:"user-content-fnref-aa","data-footnote-ref":!0,"aria-describedby":"footnote-label",children:"6"})}),".\nIt will create a project network with a subnet from either an IPv4 or IPv6 subnet pool (or one of each, if configured that way), as well as a router connecting it to a provider network.\nThe OpenStack Compute API also has support for this feature, allowing automatic network allocation on server creation."]}),"\n",(0,o.jsxs)(t.p,{children:["To function for a project, auto-allocation requires one external provider network and one shared subnet pool to be available, both with the ",(0,o.jsx)(t.code,{children:"is_default"})," flag set to True.\nIt is possible to have both an IPv4 and an IPv6 subnet pool where ",(0,o.jsx)(t.code,{children:"is_default"})," is set, in which case a dual-stack setup will be allocated.\nThe behavior is undefined when more than one network in the project is marked as default, or more than one subnet pool per address family."]}),"\n",(0,o.jsx)(t.p,{children:"So, it is strongly advisable to only have one default defined for each.\nIt seems sensible to standardize on using SCS-mandated resources as auto-allocation defaults, as this is likely to be the behavior expected by users.\nIt can also be useful for both users and automated compliance tests to determine the defaults in the presence of multiple provider networks."}),"\n",(0,o.jsx)(t.h4,{id:"disable-networking-rbac-for-users",children:"Disable Networking RBAC for Users"}),"\n",(0,o.jsxs)(t.p,{children:["Per default policy, Neutron allows any user the creation of Networking RBAC rules to share resources of their projects with other projects.\nOnly the use of the ",(0,o.jsx)(t.code,{children:"*"})," wildcard target is limited to admin users."]}),"\n",(0,o.jsxs)(t.p,{children:["However, how a network was shared, and who shared it, is not immediately obvious from the perspective of the target project.\nThe ",(0,o.jsx)(t.code,{children:"openstack network list"})," command will by default not even show the project IDs of the networks.\nAnd even though users can determine the project ID of networks by using ",(0,o.jsx)(t.code,{children:"network list --long"})," or ",(0,o.jsx)(t.code,{children:"network show"}),", they are by default forbidden from accessing any details of other projects, including the project name."]}),"\n",(0,o.jsx)(t.p,{children:"Under these conditions, a malicious user could create a network with a misleading name, share it with target projects to trick them into using it like a provider network, and then intercept their traffic."}),"\n",(0,o.jsx)(t.p,{children:"For this attack to work, the attacker has to find out the target's project ID, and the target has to be sufficiently oblivious to the CSPs provider network setup.\nCSPs can try to educate users on the correct provider networks to use, and can avoid leaking project IDs, but the best protection is to disable the creation of Networking RBAC rules for non-admin users."}),"\n",(0,o.jsx)(t.h4,{id:"required-api-extensions",children:"Required API extensions"}),"\n",(0,o.jsx)(t.p,{children:"The OpenStack Networking API has a more modular design than other OpenStack APIs.\nNew features are added as optional API extensions rather than a linear sequence of micro-version, and different Neutron core-plugins, service plugins, and mechanism drivers may provide different extensions."}),"\n",(0,o.jsxs)(t.p,{children:["In practice, the great majority of OpenStack deployments will use Neutron with the ML2 core plugin and either the ",(0,o.jsx)(t.code,{children:"router"})," or the ",(0,o.jsx)(t.code,{children:"ovn-router"})," service plugins, which should support all extensions required by this standard.\nBecause this standard tries to target the OpenStack API, rather than it's specific implementation, we might consider standardizing a minimal set of Networking API extensions that CSPs must provide."]}),"\n",(0,o.jsxs)(t.p,{children:["On the other hand, the mandatory set of API extensions follows directly from the mandated features, e.g. the ",(0,o.jsx)(t.code,{children:"external-net"}),", ",(0,o.jsx)(t.code,{children:"provider"}),", and ",(0,o.jsx)(t.code,{children:"router"})," extensions, which must all be available if an external provider network is required.\nSo, just specifying mandatory features rather than a certain set of extensions may actually be preferable, as it removes redundancy and thus the potential for inconsistency."]}),"\n",(0,o.jsx)(t.h2,{id:"standard",children:"Standard"}),"\n",(0,o.jsx)(t.h3,{id:"external-addresses",children:"External Addresses"}),"\n",(0,o.jsxs)(t.p,{children:["We define an ",(0,o.jsx)(t.em,{children:"external"})," address as an IPv4 or IPv6 address that is accessible to a user of the SCS-compliant OpenStack API.\nFor public clouds, external addresses ",(0,o.jsx)(t.strong,{children:"MUST"})," be either IPv4 public addresses or IPv6 global unicast addresses (GUA)."]}),"\n",(0,o.jsxs)(t.p,{children:["The CSP ",(0,o.jsx)(t.strong,{children:"MUST"})," offer allocation of external IPv6 addresses to user projects.\nThe CSP ",(0,o.jsx)(t.strong,{children:"SHOULD"})," offer allocation of external IPv4 addresses to user projects."]}),"\n",(0,o.jsx)(t.h3,{id:"standard-provider-network",children:"Standard Provider Network"}),"\n",(0,o.jsxs)(t.p,{children:["The CSP ",(0,o.jsx)(t.strong,{children:"MUST"})," provide every user project with a provider network that can route any external addresses that are allocated to the project.\nFor external addresses from pool-allocated subnets, this requires support for dynamic routing.\nThis provider network in the following will be referred to as the ",(0,o.jsx)(t.em,{children:"standard provider network"}),"."]}),"\n",(0,o.jsxs)(t.p,{children:["The standard provider network ",(0,o.jsx)(t.strong,{children:"MUST"})," have the ",(0,o.jsx)(t.code,{children:"is_default"})," flag set to ",(0,o.jsx)(t.code,{children:"True"}),", and it ",(0,o.jsx)(t.strong,{children:"MUST"})," be the only provider network in the project with ",(0,o.jsx)(t.code,{children:"is_default"})," set to ",(0,o.jsx)(t.code,{children:"True"}),".\nTo avoid ambiguity, the standard provider network ",(0,o.jsx)(t.strong,{children:"SHOULD"})," be the only provider network available to projects by default."]}),"\n",(0,o.jsxs)(t.p,{children:["The standard provider network ",(0,o.jsx)(t.strong,{children:"MUST"})," be an external network, allowing it to be used as external gateway by virtual routers.\nIt ",(0,o.jsx)(t.strong,{children:"MAY"})," also be a shared network, allowing direct attachment of virtual servers.\nIf the standard provider network is a shared network, then it ",(0,o.jsx)(t.strong,{children:"MUST"})," be configured allocate external addresses for directly attached servers and ports, and it ",(0,o.jsx)(t.strong,{children:"MUST"})," enable port security to prevent projects from interfering with each other."]}),"\n",(0,o.jsx)(t.h3,{id:"ipv6-allocation",children:"IPv6 Allocation"}),"\n",(0,o.jsxs)(t.p,{children:["The CSP ",(0,o.jsx)(t.strong,{children:"MUST"})," provide a shared subnet pool for the allocation of at least one /64 prefix for external IPv6 addresses per project.\nThis subnet pool ",(0,o.jsx)(t.strong,{children:"MUST"})," have the ",(0,o.jsx)(t.code,{children:"is_default"})," flag set to ",(0,o.jsx)(t.code,{children:"True"}),", and it ",(0,o.jsx)(t.strong,{children:"MUST"})," be the only shared IPv6 subnet pool in the project with ",(0,o.jsx)(t.code,{children:"is_default"})," set to ",(0,o.jsx)(t.code,{children:"True"}),"."]}),"\n",(0,o.jsx)(t.h3,{id:"ipv4-allocation",children:"IPv4 Allocation"}),"\n",(0,o.jsxs)(t.p,{children:["If the CSP offers external IPv4 addresses, they ",(0,o.jsx)(t.strong,{children:"MUST"})," provide at least one external Floating IP per project that can be allocated from the standard provider network.\nThe CSP ",(0,o.jsx)(t.strong,{children:"MAY"})," also provide a shared subnet pool for the allocation of prefixes for external IPv4 addresses to project networks.\nIf such a subnet pool is provided, it ",(0,o.jsx)(t.strong,{children:"MUST"})," have the ",(0,o.jsx)(t.code,{children:"is_default"})," flag set to ",(0,o.jsx)(t.code,{children:"True"}),", and it ",(0,o.jsx)(t.strong,{children:"MUST"})," be the only shared IPv4 subnet pool in the project with ",(0,o.jsx)(t.code,{children:"is_default"})," set to ",(0,o.jsx)(t.code,{children:"True"}),"."]}),"\n",(0,o.jsx)(t.h3,{id:"rbac-restrictions",children:"RBAC Restrictions"}),"\n",(0,o.jsxs)(t.p,{children:["By default, users ",(0,o.jsx)(t.strong,{children:"SHOULD"})," be prohibited by policy from creating Networking RBAC rules, to prevent the creation of faux provider networks.\nThe necessary policy change is described in the implementation notes to this standard."]}),"\n",(0,o.jsx)(t.h2,{id:"conformance-tests",children:"Conformance Tests"}),"\n",(0,o.jsx)(t.p,{children:"(TBD, current requirements should mostly be testable by API. Testing external routing is more tricky and will require external testing infrastructure of some sort)"}),"\n",(0,o.jsx)(t.h2,{id:"references",children:"References"}),"\n","\n",(0,o.jsxs)(t.section,{"data-footnotes":!0,className:"footnotes",children:[(0,o.jsx)(t.h2,{className:"sr-only",id:"footnote-label",children:"Footnotes"}),"\n",(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsxs)(t.li,{id:"user-content-fn-bgp",children:["\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.a,{href:"https://docs.openstack.org/neutron/2024.1/admin/config-bgp-dynamic-routing.html",children:"Neutron BGP"})," ",(0,o.jsx)(t.a,{href:"#user-content-fnref-bgp","data-footnote-backref":"","aria-label":"Back to reference 1",className:"data-footnote-backref",children:"\u21a9"})]}),"\n"]}),"\n",(0,o.jsxs)(t.li,{id:"user-content-fn-ovn-bgp",children:["\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.a,{href:"https://docs.openstack.org/ovn-bgp-agent/2024.1/readme.html",children:"Neutron BGP Agent"})," ",(0,o.jsx)(t.a,{href:"#user-content-fnref-ovn-bgp","data-footnote-backref":"","aria-label":"Back to reference 2",className:"data-footnote-backref",children:"\u21a9"})]}),"\n"]}),"\n",(0,o.jsxs)(t.li,{id:"user-content-fn-pd",children:["\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.a,{href:"https://docs.openstack.org/neutron/2024.1/admin/config-ipv6.html#prefix-delegation",children:"Prefix delegation"})," ",(0,o.jsx)(t.a,{href:"#user-content-fnref-pd","data-footnote-backref":"","aria-label":"Back to reference 3",className:"data-footnote-backref",children:"\u21a9"})," ",(0,o.jsxs)(t.a,{href:"#user-content-fnref-pd-2","data-footnote-backref":"","aria-label":"Back to reference 3-2",className:"data-footnote-backref",children:["\u21a9",(0,o.jsx)(t.sup,{children:"2"})]})]}),"\n"]}),"\n",(0,o.jsxs)(t.li,{id:"user-content-fn-pf",children:["\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.a,{href:"https://docs.openstack.org/api-ref/network/v2/index.html#floating-ips-port-forwarding",children:"Port forwarding"})," ",(0,o.jsx)(t.a,{href:"#user-content-fnref-pf","data-footnote-backref":"","aria-label":"Back to reference 4",className:"data-footnote-backref",children:"\u21a9"})]}),"\n"]}),"\n",(0,o.jsxs)(t.li,{id:"user-content-fn-ds",children:["\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.a,{href:"https://docs.openstack.org/neutron/2024.1/admin/config-ipv6.html",children:"Dual Stack"})," ",(0,o.jsx)(t.a,{href:"#user-content-fnref-ds","data-footnote-backref":"","aria-label":"Back to reference 5",className:"data-footnote-backref",children:"\u21a9"})]}),"\n"]}),"\n",(0,o.jsxs)(t.li,{id:"user-content-fn-aa",children:["\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.a,{href:"https://docs.openstack.org/neutron/2024.1/admin/config-auto-allocation.html",children:"Auto Allocation"})," ",(0,o.jsx)(t.a,{href:"#user-content-fnref-aa","data-footnote-backref":"","aria-label":"Back to reference 6",className:"data-footnote-backref",children:"\u21a9"})]}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},28453:(e,t,r)=>{r.d(t,{R:()=>a,x:()=>i});var n=r(96540);const o={},s=n.createContext(o);function a(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);