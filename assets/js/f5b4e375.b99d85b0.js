"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[60778],{60106:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"scs-0210-v2-k8s-version-policy","title":"SCS K8S Version Policy","description":"Introduction","source":"@site/standards/scs-0210-v2-k8s-version-policy.md","sourceDirName":".","slug":"/scs-0210-v2-k8s-version-policy","permalink":"/standards/scs-0210-v2-k8s-version-policy","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"SCS K8S Version Policy","type":"Standard","stabilized_at":"2024-02-08T00:00:00.000Z","status":"Stable","track":"KaaS"},"sidebar":"standards","previous":{"title":"V1","permalink":"/standards/scs-0210-v1-k8s-new-version-policy"},"next":{"title":"W1","permalink":"/standards/scs-0210-w1-k8s-version-policy-implementation-testing"}}');var r=n(74848),i=n(28453);const o={title:"SCS K8S Version Policy",type:"Standard",stabilized_at:new Date("2024-02-08T00:00:00.000Z"),status:"Stable",track:"KaaS"},a=void 0,l={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Motivation",id:"motivation",level:2},{value:"Decision",id:"decision",level:2},{value:"Related Documents",id:"related-documents",level:2},{value:"Conformance Tests",id:"conformance-tests",level:2}];function c(e){const s={a:"a",code:"code",h2:"h2",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.h2,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsx)(s.p,{children:"The Kubernetes project maintains multiple release versions including their patched versions.\nIn the project, the three most recent minor releases are actively maintained, with a fourth\nversion being in development. As soon as a new minor version is officially released,\nthe oldest version is dropped out of the support period.\nKubernetes supports its releases for around 14 months. 12 of these are the standard\nsupport period. The remaining 2 months are the end-of-life support period for things like:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"CVEs (under the advisement of the Security Response Committee)"}),"\n",(0,r.jsx)(s.li,{children:"dependency issues (including base image updates)"}),"\n",(0,r.jsx)(s.li,{children:"critical core component issues"}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:["More information can be found under ",(0,r.jsx)(s.a,{href:"https://kubernetes.io/releases/patch-releases/#support-period",children:"Kubernetes Support Period"}),"."]}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.a,{href:"https://kubernetes.io/releases/release/#the-release-cycle",children:"Kubernetes release cycle"})," is set around 4 months, which\nusually results in about ",(0,r.jsx)(s.strong,{children:"3 minor"})," releases per year."]}),"\n",(0,r.jsxs)(s.p,{children:["Patches to these releases are provided monthly, except for the first patch,\nwhich is usually provided 1-2 weeks after the initial release (see ",(0,r.jsx)(s.a,{href:"https://kubernetes.io/releases/patch-releases/#cadence",children:"Patch Release\nCadence"}),")."]}),"\n",(0,r.jsx)(s.h2,{id:"motivation",children:"Motivation"}),"\n",(0,r.jsx)(s.p,{children:"Kubernetes is a living, fast-paced project, which follows a pre-defined release cycle.\nThis enables forward planning with regard to releases and patches, but also implies a\nnecessity to upgrade to newer versions quickly, since these often include new features,\nimportant security updates or especially if a previous version falls out of the support\nperiod window."}),"\n",(0,r.jsx)(s.p,{children:"We want to achieve an up-to-date policy, meaning that providers should be mostly in\nsync with the upstream and don't fall behind the official Kubernetes releases.\nThis is achievable, since new versions are released periodical on a well communicated\nschedule, enabling providers and users to set up processes around it.\nBeing up-to-date ensures that security issues and bugs are addressed and new features\nare made available when using SCS compliant clusters."}),"\n",(0,r.jsx)(s.p,{children:"It is nevertheless important to at least support all Kubernetes versions that are still\ninside the support period, since users could depend on specific versions or may need\nlonger to upgrade their workloads to a newer version."}),"\n",(0,r.jsx)(s.p,{children:"The standard therefore should provide a version recency policy as well as a support\nwindow period."}),"\n",(0,r.jsx)(s.h2,{id:"decision",children:"Decision"}),"\n",(0,r.jsx)(s.p,{children:"In order to keep up-to-date with the latest Kubernetes features, bug fixes and security improvements,\nthe provided Kubernetes versions should be kept up-to-date with new upstream releases:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"The latest minor version MUST be provided no later than 4 months after release."}),"\n",(0,r.jsx)(s.li,{children:"The latest patch version MUST be provided no later than 2 weeks after release."}),"\n",(0,r.jsx)(s.li,{children:"This time period MUST be even shorter for patches that fix critical CVEs.\nIn this context, a critical CVE is a CVE with a CVSS base score >= 8 according\nto the CVSS version used in the original CVE record (e.g., CVSSv3.1).\nIt is RECOMMENDED to provide a new patch version in a 2-day time period after their release."}),"\n",(0,r.jsxs)(s.li,{children:["New versions MUST be tested before being rolled out on productive infrastructure;\nat least the ",(0,r.jsx)(s.a,{href:"https://github.com/cncf/k8s-conformance",children:"CNCF E2E tests"})," should be passed beforehand."]}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:["At the same time, providers must support Kubernetes versions at least as long as the\nofficial sources as described in ",(0,r.jsx)(s.a,{href:"https://kubernetes.io/releases/patch-releases/#support-period",children:"Kubernetes Support Period"}),":"]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Kubernetes versions MUST be supported as long as the official sources support them\naccording to the ",(0,r.jsx)(s.a,{href:"https://kubernetes.io/releases/patch-releases/#support-period",children:"Kubernetes Support Period"})," and their end-of-life\ndate according to the ",(0,r.jsx)(s.a,{href:"https://kubernetes.io/releases/",children:"Kubernetes Releases page"}),"."]}),"\n",(0,r.jsx)(s.li,{children:"It is RECOMMENDED to not support versions after this period in order to not encourage\nusage of out-of-date versions."}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"related-documents",children:"Related Documents"}),"\n",(0,r.jsxs)(s.p,{children:["All documents regarding versioning, releases, etc. for the official Kubernetes projects can\nbe found on the ",(0,r.jsx)(s.a,{href:"https://kubernetes.io/releases/",children:"Kubernetes Releases page"}),"."]}),"\n",(0,r.jsx)(s.h2,{id:"conformance-tests",children:"Conformance Tests"}),"\n",(0,r.jsxs)(s.p,{children:["The script ",(0,r.jsx)(s.code,{children:"k8s_version_policy.py"})," requires a kubeconfig file with connection details for\na set of existing Kubernetes clusters that should be checked, with each of these clusters\nrepresenting one of the currently supported upstream Kubernetes releases.\nIt will check the encountered cluster versions according to the rules of this standard.\nRule violations will be reported on various logging channels: ERROR for mandatory rules\nand INFO for recommended rules.\nThe script will exit with a non-zero status if a mandatory rule has been violated or if\nthe test could not be performed."]})]})}function h(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>o,x:()=>a});var t=n(96540);const r={},i=t.createContext(r);function o(e){const s=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(i.Provider,{value:s},e.children)}}}]);