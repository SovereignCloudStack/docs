"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[36070],{92291:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"scs-0300-v1-requirements-for-sso-identity-federation","title":"Requirements for SSO identity federation","description":"The SCS-0300 standard outlines requirements for Single Sign-On (SSO) identity federation within the Sovereign\\nCloud Stack (SCS). It addresses the need for customers to access SCS services using credentials stored and managed\\nexternally, facilitating user onboarding and reducing the need for additional dedicated SCS accounts. The standard\\nfocuses on delegating authentication to external identity providers and mapping users to roles within SCS for\\nauthorization, while also considering the use of machine identities. Keycloak is the current choice as an Identity\\nProvider (IdP) for its support of OAuth 2.0 grants and its integration with OpenStack and kolla-ansible.\\n","source":"@site/standards/scs-0300-v1-requirements-for-sso-identity-federation.md","sourceDirName":".","slug":"/scs-0300-v1-requirements-for-sso-identity-federation","permalink":"/standards/scs-0300-v1-requirements-for-sso-identity-federation","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Requirements for SSO identity federation","type":"Decision Record","status":"Stable","stabilized_at":"2023-06-21T00:00:00.000Z","track":"IAM","description":"The SCS-0300 standard outlines requirements for Single Sign-On (SSO) identity federation within the Sovereign\\nCloud Stack (SCS). It addresses the need for customers to access SCS services using credentials stored and managed\\nexternally, facilitating user onboarding and reducing the need for additional dedicated SCS accounts. The standard\\nfocuses on delegating authentication to external identity providers and mapping users to roles within SCS for\\nauthorization, while also considering the use of machine identities. Keycloak is the current choice as an Identity\\nProvider (IdP) for its support of OAuth 2.0 grants and its integration with OpenStack and kolla-ansible.\\n"},"sidebar":"standards","previous":{"title":"scs-0300: Requirements for SSO identity federation","permalink":"/standards/iam/scs-0300"},"next":{"title":"scs-0301: Naming for domains/groups/roles/project when onboarding new customers","permalink":"/standards/iam/scs-0301"}}');var s=n(74848),o=n(28453);const a={title:"Requirements for SSO identity federation",type:"Decision Record",status:"Stable",stabilized_at:new Date("2023-06-21T00:00:00.000Z"),track:"IAM",description:"The SCS-0300 standard outlines requirements for Single Sign-On (SSO) identity federation within the Sovereign\nCloud Stack (SCS). It addresses the need for customers to access SCS services using credentials stored and managed\nexternally, facilitating user onboarding and reducing the need for additional dedicated SCS accounts. The standard\nfocuses on delegating authentication to external identity providers and mapping users to roles within SCS for\nauthorization, while also considering the use of machine identities. Keycloak is the current choice as an Identity\nProvider (IdP) for its support of OAuth 2.0 grants and its integration with OpenStack and kolla-ansible.\n"},r=void 0,d={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Motivation for this document",id:"motivation-for-this-document",level:2},{value:"Design Considerations",id:"design-considerations",level:2},{value:"Options considered",id:"options-considered",level:3},{value:"Keycloak",id:"keycloak",level:4},{value:"Zitadel",id:"zitadel",level:4},{value:"Open questions",id:"open-questions",level:2},{value:"Decision",id:"decision",level:2},{value:"Related Documents",id:"related-documents",level:2},{value:"Conformance Tests",id:"conformance-tests",level:2},{value:"Conformance Tests, OPTIONAL",id:"conformance-tests-optional",level:2}];function l(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsx)(t.p,{children:"Our assumption is that there are use cases, where CSPs would like to be able to\nlet customers access their SCS based services by identifying themselves with\ncredentials that are stored and managed external to the CSP's SCS installation."}),"\n",(0,s.jsx)(t.p,{children:"This is based on the observation that prospective customers of an SCS based CSP\nsometimes already come equipped with an IAM solution of their choice, either on\npremises or e.g. as an external 3rd party cloud service. To ease onboarding of\ncustomer employees (or e.g. customer contracted 3rd party admin staff) as SCS\nusers, it would be good to be able to consume these external identities in SCS."}),"\n",(0,s.jsx)(t.p,{children:"For customers this avoids the necessity to explicitly maintain an additional\ndedicated account in SCS and this also reduces what SCS needs to do with\nrespect to taking care of persisting user account information."}),"\n",(0,s.jsx)(t.p,{children:"To put it in other words, in SCS we would like to be able to delegate\nauthentication to external identity providers and map those users to roles in\nSCS that can be used for authorization decisions when users access SCS services."}),"\n",(0,s.jsx)(t.p,{children:'In addition to user identities there we also see the necessity to support the\nuse of "machine identities" (aka "workload identities" or "service accounts").\nThese will probably be SCS-local accounts and have for example the purpose\nto grant CaaS workload access to storage resources served by the infrastructure\nlayer. Exact architectural details for this are still in active discussion,\nbut it is anticipated that the IdP component should be very useful in\nfacilitating the integration.'}),"\n",(0,s.jsx)(t.h2,{id:"motivation-for-this-document",children:"Motivation for this document"}),"\n",(0,s.jsx)(t.p,{children:"SCS has multiple service layers, like IaaS and CaaS, both of which running their\nown technological stack with specific internal models of accounts and\nauthorization."}),"\n",(0,s.jsx)(t.p,{children:"One thing these services have in common, is that they are able\nto use SSO protocols like OAuth 2.0 or OpenID Connect (OIDC) on top of it to\ndelegate authentication. They are service providers (SAML terminology) and can\nbe relying on parties (OIDC terminology) of a protocol compliant identity provider\n(IdP)."}),"\n",(0,s.jsx)(t.p,{children:"So the idea is, to run an SSO IdP as part of SCS to provide a dedicated point\nof entry for identities, which the SCS service layers can use as a common\ninterface to consume external user identities."}),"\n",(0,s.jsx)(t.p,{children:"The purpose of this document is to specify what requirements a specific\ntechnical IdP implementation (i.e. software solution) needs to fulfill\nin the context of SCS."}),"\n",(0,s.jsx)(t.h2,{id:"design-considerations",children:"Design Considerations"}),"\n",(0,s.jsx)(t.p,{children:"As a central service for identity handling, the IdP\nservice needs to be robust and reliable."}),"\n",(0,s.jsx)(t.p,{children:'Customers shall be able to access self-service, so that\nthey can make reasonable adjustments e.g. to role mapping.\nAt the time of writing this document it\'s still undecided\nif SCS has the requirement of a dedicated "self-service" service\nthat serves as a frontend to provision and re-configure\ncustomer specific data, abstracting e.g. from IdP specific\nuser interface particularities.'}),"\n",(0,s.jsx)(t.p,{children:'Keycloak is currently being deployed as part of the IaaS reference implementation.\nTechnically this IdP component shall be shifted from the management\nplane to be run on the basis of a "minimal" Kubernetes (e.g. K3S),\ne.g. to make use of the "self-healing" and scaling features achievable\nwith that.'}),"\n",(0,s.jsx)(t.p,{children:"So one of the considerations is if the solution will work well on a\nK8S environment. The instances will need to share configuration\n(probably via the shared backend database) as well as session state.\nMaybe one is better prepared for horizontal scaling than the other."}),"\n",(0,s.jsx)(t.h3,{id:"options-considered",children:"Options considered"}),"\n",(0,s.jsx)(t.h4,{id:"keycloak",children:"Keycloak"}),"\n",(0,s.jsx)(t.p,{children:"Keycloak is a commonly used IdP solution implemented in Java.\nIt is developed as an open source community project.\nRed Hat uses it as upstream source for their Red Hat SSO product\nand is also listed as sponsor of the project.\nStarting with version 17 the default distribution is based on\nQuarkus instead of WildFly/JBoss."}),"\n",(0,s.jsxs)(t.p,{children:["The project maintains several means of community contributions\nas listed on the ",(0,s.jsx)(t.a,{href:"https://www.keycloak.org/community",children:"community section"}),"\nof the project website. It uses ",(0,s.jsx)(t.a,{href:"https://github.com/keycloak/keycloak/issues",children:"GitHub issues"}),"\nto track development."]}),"\n",(0,s.jsx)(t.p,{children:"It offers a REST API for administration and there's a separately maintained\n3rd party python module as well as ansible support for it. Both of these are\ndownstream of Keycloak itself and may thus not always be feature complete and\nsuffer latency with respect to getting adjusted to upstream changes."}),"\n",(0,s.jsx)(t.p,{children:'It offers support for commonly used SSO protocols and is "reasonably" fast\nin adopting to protocol standard changes and extensions. This has been\nobserved in the case of logout support (backend and frontend variants) in OIDC.'}),"\n",(0,s.jsx)(t.p,{children:'It offers a concept of "Identity Brokering", where Keycloak is not just IdP\nbut also "client" to other IdPs. This allows daisy-chaining of identity\nfederation. In this configuration it can work as a point of protocol\ntransition between different supported SSO protocols (SAML, OAuth 2.0, etc.).'}),"\n",(0,s.jsx)(t.p,{children:"Beyond this capability of using other IdPs as identity sources, it also supports\nusing classic LDAP based IAM services as backend (OpenLDAP and Active Directory,\ne.g.)."}),"\n",(0,s.jsx)(t.p,{children:'Keycloak\'s implementation makes some design decisions, that are specific\nto it and have consequences for clients of the service. E.g. Keycloak\nhas a concept of management "Realms", which have their own specific\nset of HTTP API entrypoints, both for administration and for IdP\nrequests.'}),"\n",(0,s.jsx)(t.p,{children:'Commonly Keycloak realms can be used to map them 1:1 to user domains,\nbut since Keycloak supports configuring multiple backend IdPs in a\nrealm to be used for "Identity Brokering", there is always the\npossibility to create a kind of "proxy" realm to provide a single\nstandard set of HTTP API endpoints for SSO clients (service providers)\nto avoid the need to frequently extend/reduce client service configuration\nwhenever a new IdP federation needs to be added to Keycloak to onboard\na new customer. This is relevant for services like OpenStack Keystone,\nwhich currently cannot be easily reconfigured for new SSO endpoints\nwithout restarting the service, making the service unavailable for\na short span of time and increasing risk connected with service restarts.'}),"\n",(0,s.jsx)(t.p,{children:'Since version 17, Keycloak claims that it\'s capability for\n"cloud native" deployments on Kubernetes has improved.'}),"\n",(0,s.jsxs)(t.p,{children:["Keycloak is offering a ",(0,s.jsx)(t.a,{href:"https://www.keycloak.org/documentation",children:"documented REST API"}),"\nfor all aspects of its administration interface."]}),"\n",(0,s.jsx)(t.p,{children:"For storage of Keycloak configuration and local user metadata\n(e.g. from which external IdP a user account originally came from)\nKeycloak supports several SQL backends through JDBC. Thus,\nit can be hooked up to a Postgres Database or to a\nMariaDB/Galera cluster e.g."}),"\n",(0,s.jsx)(t.p,{children:"As of April 11, 2023, Keycloak joined the CNCF as an incubating project."}),"\n",(0,s.jsx)(t.h4,{id:"zitadel",children:"Zitadel"}),"\n",(0,s.jsx)(t.p,{children:"Zitadel is a newer implementation of an SSO IdP.\nIt is implemented in Go and under active development and maintained by ZITADEL."}),"\n",(0,s.jsxs)(t.p,{children:["The project is open for community ",(0,s.jsx)(t.a,{href:"https://github.com/zitadel/zitadel/blob/main/CONTRIBUTING.md",children:"contributions"}),"\nto all parts of the ecosystem.\nFeature requests and bugs being tracked on ",(0,s.jsx)(t.a,{href:"https://github.com/orgs/zitadel/projects/2/views/5",children:"GitHub"})," for development.\nCommunity questions can be asked in the ",(0,s.jsx)(t.a,{href:"https://zitadel.com/chat",children:"public chat"})," or via ",(0,s.jsx)(t.a,{href:"https://github.com/zitadel/zitadel/discussions",children:"GitHub Discussions"}),".\nZITADEL offers support for the commonly used authentication and authorization protocols such as OIDC, OAuth2, SAML2.\nIt is a compliant and certified OpenID Connect provider with support for various Grant Types for both human users and machine users.\nCompared to Keycloak SPIs, ZITADEL offers Actions to customize and integrate (eg, calling external APIs, Webhooks, customizing pre-built workflows, customizing tokens)\nActions are executed at runtime and can be maintained independently of platform.\nIdentity brokering (OIDC, SAML, JWT) can be configured system-wide or for each organization with templates.\nUsers will be created just in time for audit purposes and linked to the external identity provider.\nUsers can have multiple identity providers linked to their profile."]}),"\n",(0,s.jsx)(t.p,{children:"It came to attention of the SCS project because it offers a\nfresh take of an organization focussed data model, which has\nthe potential to simplify IdP federation to SCS customer domains\nin the following areas:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"For client services (single set of HTTP API endpoints)."}),"\n",(0,s.jsxs)(t.li,{children:["For SCS operators for provisioning customer ",(0,s.jsx)(t.a,{href:"https://zitadel.com/docs/concepts/structure/organizations",children:"organizations"}),"\nand robust configuration by using templated client, role and mapping\nconfiguration."]}),"\n",(0,s.jsx)(t.li,{children:"For SCS customers for a robust user experience for self servicing."}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["The concept for ",(0,s.jsx)(t.a,{href:"https://zitadel.com/docs/concepts/structure/organizations",children:"Delegated Access Management"}),"\nreduces the management overhead compared to isolated realms.\nProjects (Applications + Roles) can be maintained by one organization and delegated to be used by other Organizations.\nManagers that receive granted Projects can assign users permissions to use the project."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"https://zitadel.com/docs/apis/introduction",children:"Zitadel is offering REST APIs"}),"\nfor multiple areas of use and configuration."]}),"\n",(0,s.jsxs)(t.p,{children:["It recently also added support for the ",(0,s.jsx)(t.a,{href:"https://github.com/zitadel/oidc/issues/141",children:"Device Authorization Grant"}),",\nwhich, at time of writing, is a feature that is relevant\nfor SCS to be able to use OpenStack CLI and APIs with federated\nidentities (",(0,s.jsx)(t.a,{href:"https://github.com/SovereignCloudStack/issues/issues/221",children:"Device Authorization Grant"}),")."]}),"\n",(0,s.jsxs)(t.p,{children:["Support for consumption of LDAP backends is available since ",(0,s.jsx)(t.a,{href:"https://github.com/zitadel/zitadel/releases/tag/v2.23.0",children:"Zitadel v2.23.0"}),"\n(see ",(0,s.jsx)(t.a,{href:"https://zitadel.com/docs/guides/integrate/identity-providers/ldap",children:"this guide"}),")."]}),"\n",(0,s.jsx)(t.p,{children:"ZITADEL supported backend databases are CockroachDB and PostgreSQL."}),"\n",(0,s.jsxs)(t.p,{children:["For ",(0,s.jsx)(t.a,{href:"https://zitadel.com/docs/self-hosting/manage/production",children:"production setups"})," it is recommended\nto use Kubernetes (or similar like Knative) and CockroachDB."]}),"\n",(0,s.jsx)(t.p,{children:'At time of writing a PoC "spike" is done to assess and verify the hopes\nconnected with Zitadel in the context of the SCS testbed.'}),"\n",(0,s.jsxs)(t.p,{children:["Currently, Zitadel is lacking the possibility to easily add custom claims.\nIt supports ",(0,s.jsx)(t.code,{children:"urn:zitadel:iam:user:metadata"}),", but that is more suitable\ntowards Kubernetes and cannot be parsed with the OpenStack mapping mechanism.\n",(0,s.jsx)(t.a,{href:"https://github.com/zitadel/zitadel/issues/3997",children:"There is work going on"})," which\nmay be suitable to resolve this issue.\nAn approach based on Zitadel actions is also currently evaluated.\nOpenStack currently makes use of custom claims to pass ",(0,s.jsx)(t.code,{children:"openstack-default-project"}),"\nfrom the IdP to OpenStack. Combined with federation to external customer managed IdPs\nthis should allow customers to manage settings like these in their own IAM."]}),"\n",(0,s.jsx)(t.h2,{id:"open-questions",children:"Open questions"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["How would we implement testbed deployment support for Zitadel?","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["e.g. ",(0,s.jsx)(t.code,{children:"wsgi-keystone.conf"})," would need to look different. One template covering both options?"]}),"\n",(0,s.jsxs)(t.li,{children:["e.g. steps like ",(0,s.jsx)(t.code,{children:"openstack federation protocol create"})," would probably be different."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["Should we support both as options?","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"What's the benefit?"}),"\n",(0,s.jsx)(t.li,{children:"How would we allow SCS operators to choose?"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.li,{children:"Do we need some kind of SWOT analysis to come to a decision?"}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"decision",children:"Decision"}),"\n",(0,s.jsx)(t.p,{children:"SCS wants to make use of an IdP as part of the reference implementation.\nTo move forward with topics of configuration and mapping of roles in a\nOAuth2 federation scenario as well as questions of token lifecycles etc. across\nthe federation stack it makes sense to focus on one IdP implementation at a\ngiven time. Both considered options seem to be potentially viable, but ultimately,\na decision should be made, even if there are no strict/strong reasons for\ndismissing either option in particular."}),"\n",(0,s.jsx)(t.p,{children:"The project's current choice is Keycloak for the following reasons:\nKeycloak currently supports the OAuth 2.0 grants that SCS wants to make\nuse of (e.g. Device Authorization Grant). It is the implementation for\nwhich integration is currently documented in OpenStack and implemented\nin kolla-ansible. SCS currently deploys Keycloak and the IAM team has\nmost hands-on experience with it, e.g. when it comes to collateral questions\nlike how to make TLS and signing certificates available to the IdP that shall\nbe used in federation to external domains."}),"\n",(0,s.jsx)(t.h2,{id:"related-documents",children:"Related Documents"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/SovereignCloudStack/standards/tree/main/Drafts/IAM-federation",children:"https://github.com/SovereignCloudStack/standards/tree/main/Drafts/IAM-federation"})}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"conformance-tests",children:"Conformance Tests"}),"\n",(0,s.jsx)(t.h2,{id:"conformance-tests-optional",children:"Conformance Tests, OPTIONAL"})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>r});var i=n(96540);const s={},o=i.createContext(s);function a(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);