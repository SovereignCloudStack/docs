"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[35575],{77123:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"development/tests/test-implementation-guide","title":"SCS Conformance Test Implementation Guide","description":"SovereignCloudStack (SCS) uses conformance tests to certify","source":"@site/contributor-docs/development/tests/test-implementation-guide.md","sourceDirName":"development/tests","slug":"/development/tests/test-implementation-guide","permalink":"/contributor-docs/development/tests/test-implementation-guide","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"SCS Conformance Test Implementation Guide","type":null,"status":"Draft","track":"Global"},"sidebar":"devDocs","previous":{"title":"SCS RFC2119 Keyword Test Guide","permalink":"/contributor-docs/development/tests/rfc2119-keyword-test-guide"},"next":{"title":"Documentation for SCS Contributors","permalink":"/contributor-docs/"}}');var i=n(74848),o=n(28453);const r={title:"SCS Conformance Test Implementation Guide",type:null,status:"Draft",track:"Global"},a=void 0,c={},l=[{value:"1. Mapping of RFC2119 Keywords",id:"1-mapping-of-rfc2119-keywords",level:2},{value:"2. Unit and Regression Tests",id:"2-unit-and-regression-tests",level:2},{value:"Naming Conventions",id:"naming-conventions",level:3},{value:"Write Testable Conformance Tests",id:"write-testable-conformance-tests",level:3},{value:"Pytest Test Example",id:"pytest-test-example",level:3},{value:"3. Conformance Tests Shouldn&#39;t Require Admin Privileges",id:"3-conformance-tests-shouldnt-require-admin-privileges",level:2}];function d(e){const t={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:["SovereignCloudStack (SCS) uses ",(0,i.jsx)(t.a,{href:"https://github.com/SovereignCloudStack/standards/tree/main/Tests",children:"conformance tests"})," to certify\ncompliance of a given cloud offering with respect to a given ",(0,i.jsx)(t.a,{href:"https://docs.scs.community/standards/certification/scopes-versions",children:"certificate\nscope"})," such as ",(0,i.jsx)(t.em,{children:"SCS Compatible IaaS v4"}),".\nOur aim is that these tests are reliable, consistent and comprehensible for\nthe users.\nThis document is a guideline for conformance test authors and summarizes the\ncurrent best practices to achieve this goal."]}),"\n",(0,i.jsx)(t.h2,{id:"1-mapping-of-rfc2119-keywords",children:"1. Mapping of RFC2119 Keywords"}),"\n",(0,i.jsxs)(t.p,{children:["Test authors working on new and existing conformance tests for an SCS standard\nmust implement the keywords such as MUST and SHOULD according to the ",(0,i.jsx)(t.a,{href:"https://docs.scs.community/contributor-docs/operations/tests/rfc2119-keyword-test-guide",children:"SCS\nRFC2119 Keyword Test Guide"}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"2-unit-and-regression-tests",children:"2. Unit and Regression Tests"}),"\n",(0,i.jsxs)(t.p,{children:["Test authors are ",(0,i.jsx)(t.em,{children:"strongly"})," encouraged to include unit and regression tests for\nthe conformance test's logic.\nConformance tests will inevitably contain some non-trivial algorithms, be it for\nparsing flavor names or evaluating CVE vulnerability reports.\nTesting them automatically and regularly against valid and invalid inputs helps\ntest authors to find programming mistakes early on.\nAs a bonus, a well written unit test also makes it easier for reviewers to cross\ncheck a given pull request with new, enhanced or refactored conformance tests."]}),"\n",(0,i.jsxs)(t.p,{children:["In general, unit and regression tests for the conformance tests are located in\nthe same location as the conformance tests, that is, the ",(0,i.jsx)(t.code,{children:"Tests/"})," directory of\nthe ",(0,i.jsx)(t.a,{href:"https://github.com/SovereignCloudStack/standards/",children:"SCS standards repository"}),".\nSetup and development of the unit tests is described in the ",(0,i.jsx)(t.a,{href:"https://github.com/SovereignCloudStack/standards/blob/main/Tests/README.md",children:"SCS conformance\ntests README"}),"."]}),"\n",(0,i.jsx)(t.h3,{id:"naming-conventions",children:"Naming Conventions"}),"\n",(0,i.jsxs)(t.p,{children:["Any module that ends in ",(0,i.jsx)(t.code,{children:"_test"})," will be picked up as a unit test module by\npytest in our CI pipeline (in other words, all files matched by the pattern\n",(0,i.jsx)(t.code,{children:"Tests/**/*_test.py"}),").\nPytest will execute any function prefixed with ",(0,i.jsx)(t.code,{children:"test_"})," as a test function, or,\nalternatively, tests based on the ",(0,i.jsx)(t.code,{children:"unittest"})," module from the Python standard\nlibrary."]}),"\n",(0,i.jsx)(t.p,{children:"Follow these naming rules:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["The name of a unit test module is constructed from the module to be unit\ntested and the ",(0,i.jsx)(t.code,{children:"_test"})," suffix. For example, unit tests for ",(0,i.jsx)(t.code,{children:"flavor_names.py"}),"\nshould reside in ",(0,i.jsx)(t.code,{children:"flavor_names_test.py"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:["The name of a Python module in general should be a valid ",(0,i.jsx)(t.a,{href:"https://docs.python.org/3/reference/lexical_analysis.html#identifiers",children:"Python\nidentifier"}),", to allow imports via the ",(0,i.jsx)(t.code,{children:"import"})," statement.\nFor example, use ",(0,i.jsx)(t.code,{children:"flavor_names.py"})," instead of ",(0,i.jsx)(t.code,{children:"flavor-names.py"}),"."]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"write-testable-conformance-tests",children:"Write Testable Conformance Tests"}),"\n",(0,i.jsx)(t.p,{children:"Software design fills complete book shelves and this section can only cover some\nbasic best practices.\nAs a general rule of thumb, the earlier you begin writing unit tests, the better\n\u2013 it will force you to write modules that are easy to test."}),"\n",(0,i.jsxs)(t.p,{children:["Divide conformance tests scripts into smaller, loosely coupled units, i.e.,\nfunctions that serve one purpose each.\nUse the ",(0,i.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Dependency_injection",children:(0,i.jsx)(t.em,{children:"dependency injection"})})," technique, i.e., pass externally\nretrieved data as function arguments instead of hardcoding the calls to the\nretrieval functions inside a function.\nAvoid logging calls deep down in the call hierarchy and use explicit return\nvalues or raise exceptions, instead.\nHere is an abstract example of a conformance test which does exactly that:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'# property_compliance.py\n\ndef retrieve(location):\n    """Retrieve raw data via network."""\n    ...\n\ndef parse(data):\n    """Parse raw data and return a dict."""\n    ...\n\ndef handle(...):\n    """Evaluate parsed data."""\n    ...\n\ndef main(args):\n    ...\n    data = retrieve(location)\n    parsed = parse(data)\n    result = handle(parsed)\n    ...\n    if result.some_prop != expected_value:\n        logging.warn("some_prop is not as expected: %s (vs. %s)", result.some_prop, expected_value)\n    ...\n    return result.success\n\nif __name__ == "__main__":\n    # using sys.exit(\u2026) only here makes it possible to unit test main(\u2026)\n    sys.exit(main(sys.argv))\n'})}),"\n",(0,i.jsx)(t.p,{children:"Adhering to this style makes it easier to test an algorithm in isolation,\nwithout actually making a call to some external service."}),"\n",(0,i.jsx)(t.h3,{id:"pytest-test-example",children:"Pytest Test Example"}),"\n",(0,i.jsxs)(t.p,{children:["Assuming we want to unit test some members of the module ",(0,i.jsx)(t.code,{children:"property_compliance"}),"\nfrom the previous section, we would create a file ",(0,i.jsx)(t.code,{children:"property_compliance_test.py"}),"\nwith the following content as a starting point:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'"""Unit tests for property_compliance.\n\n(c) Your Name <your.name@example.com>, 4/2024\nSPDX-License-Identifier: CC-BY-SA-4.0\n"""\n\nimport pytest\n\nfrom property_compliance import parse\n\n\ndef test_success():\n    assert parse("some valid input") == "expected output"\n\n\ndef test_failure():\n    with pytest.raises(ValueError):\n        parse("invalid input")\n'})}),"\n",(0,i.jsx)(t.h2,{id:"3-conformance-tests-shouldnt-require-admin-privileges",children:"3. Conformance Tests Shouldn't Require Admin Privileges"}),"\n",(0,i.jsxs)(t.p,{children:["Conformance tests are expected to be executable without admin privileges (see \xa72 of\n",(0,i.jsx)(t.a,{href:"https://github.com/SovereignCloudStack/standards/blob/main/Standards/scs-0004-v1-achieving-certification.md",children:"Regulations for achieving SCS-compatible certification"}),").\nIn particular, this means:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["The cloud credentials (e.g., kubeconfig and OpenStack ",(0,i.jsx)(t.code,{children:"clouds.yaml"}),") passed to\nthe scripts are non-admin credentials."]}),"\n",(0,i.jsx)(t.li,{children:"Conformance tests scripts should not require root privileges, except for the\ninstallation of operating system prerequisites (e.g., a Python interpreter)."}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var s=n(96540);const i={},o=s.createContext(i);function r(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);