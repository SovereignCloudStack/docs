"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[86397],{16380:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>i});const r=JSON.parse('{"id":"container/components/cluster-stacks/components/cluster-stack-operator/reference/clusterstack","title":"clusterstack","description":"ClusterStack","source":"@site/docs/03-container/components/cluster-stacks/components/cluster-stack-operator/reference/clusterstack.md","sourceDirName":"03-container/components/cluster-stacks/components/cluster-stack-operator/reference","slug":"/container/components/cluster-stacks/components/cluster-stack-operator/reference/clusterstack","permalink":"/docs/container/components/cluster-stacks/components/cluster-stack-operator/reference/clusterstack","draft":false,"unlisted":false,"editUrl":"https://github.com/SovereignCloudStack/docs/tree/main/docs/03-container/components/cluster-stacks/components/cluster-stack-operator/reference/clusterstack.md","tags":[],"version":"current","frontMatter":{}}');var c=s(74848),n=s(28453);const o={},l=void 0,a={},i=[{value:"ClusterStack",id:"clusterstack",level:2},{value:"Lifecycle of a ClusterStack",id:"lifecycle-of-a-clusterstack",level:3},{value:"Overview of ClusterStack.Spec",id:"overview-of-clusterstackspec",level:3},{value:"Example of the ClusterStack object",id:"example-of-the-clusterstack-object",level:3}];function d(e){const t={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,n.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(t.h2,{id:"clusterstack",children:"ClusterStack"}),"\n",(0,c.jsxs)(t.p,{children:["The ",(0,c.jsx)(t.code,{children:"ClusterStack"})," object is the main resource for users to work with. It contains the most important details of a cluster stack and its releases (i.e. certain versions). In its status is the main source of information of the state of everything related to cluster stacks."]}),"\n",(0,c.jsx)(t.h3,{id:"lifecycle-of-a-clusterstack",children:"Lifecycle of a ClusterStack"}),"\n",(0,c.jsxs)(t.p,{children:["The ",(0,c.jsx)(t.code,{children:"ClusterStack"})," object has a sub-resource ",(0,c.jsx)(t.code,{children:"ClusterStackRelease"})," for every release that should be provided to the user, either by specifying them manually in the versions array, or automatically through the auto-subscribe functionality."]}),"\n",(0,c.jsxs)(t.p,{children:["The controller reconciles the two sources of information and checks whether for every release that should exist, there is actually one. It also deletes ",(0,c.jsx)(t.code,{children:"ClusterStackRelease"})," objects that are not required anymore."]}),"\n",(0,c.jsxs)(t.p,{children:["Additionally, it fetches information from the ",(0,c.jsx)(t.code,{children:"ClusterStackRelease"})," objects and populates its own state with it."]}),"\n",(0,c.jsxs)(t.p,{children:["In case that a provider integration is used, it will create ",(0,c.jsx)(t.code,{children:"ProviderClusterStackRelease"})," objects in addition to ",(0,c.jsx)(t.code,{children:"ClusterStackRelease"})," objects, based on the ",(0,c.jsx)(t.code,{children:"ProviderClusterStackReleaseTemplate"})," objects given as reference in ",(0,c.jsx)(t.code,{children:"spec.providerRef"}),"."]}),"\n",(0,c.jsx)(t.h3,{id:"overview-of-clusterstackspec",children:"Overview of ClusterStack.Spec"}),"\n",(0,c.jsxs)(t.table,{children:[(0,c.jsx)(t.thead,{children:(0,c.jsxs)(t.tr,{children:[(0,c.jsx)(t.th,{children:"Key"}),(0,c.jsx)(t.th,{children:"Type"}),(0,c.jsx)(t.th,{children:"Default"}),(0,c.jsx)(t.th,{children:"Required"}),(0,c.jsx)(t.th,{children:"Description"})]})}),(0,c.jsxs)(t.tbody,{children:[(0,c.jsxs)(t.tr,{children:[(0,c.jsx)(t.td,{children:"provider"}),(0,c.jsx)(t.td,{children:"string"}),(0,c.jsx)(t.td,{}),(0,c.jsx)(t.td,{children:"yes"}),(0,c.jsx)(t.td,{children:'Name of the provider, e.g. "docker". It is used in various places, e.g. while fetching the respective release assets or while naming resources (ClusterStackReleases, ProviderClusterStackResources, etc.).'})]}),(0,c.jsxs)(t.tr,{children:[(0,c.jsx)(t.td,{children:"name"}),(0,c.jsx)(t.td,{children:"string"}),(0,c.jsx)(t.td,{}),(0,c.jsx)(t.td,{children:"yes"}),(0,c.jsx)(t.td,{children:"Name of the cluster stack. It is used as well for fetching release assets and other tasks."})]}),(0,c.jsxs)(t.tr,{children:[(0,c.jsx)(t.td,{children:"kubernetesVersion"}),(0,c.jsx)(t.td,{children:"string"}),(0,c.jsx)(t.td,{}),(0,c.jsx)(t.td,{children:"yes"}),(0,c.jsxs)(t.td,{children:["Kubernetes version in the format ",(0,c.jsx)(t.code,{children:"<majorVersion>.<minorVersion>"}),", e.g. 1.26. Specifies the Kubernetes minor version of the cluster stack that should be taken."]})]}),(0,c.jsxs)(t.tr,{children:[(0,c.jsx)(t.td,{children:"channel"}),(0,c.jsx)(t.td,{children:"string"}),(0,c.jsx)(t.td,{children:"stable"}),(0,c.jsx)(t.td,{children:"no"}),(0,c.jsx)(t.td,{children:'Name of release channel that is used, e.g. stable channel ("v1", "v2", etc.) or beta channel (e.g. "v0-beta.1").'})]}),(0,c.jsxs)(t.tr,{children:[(0,c.jsx)(t.td,{children:"versions"}),(0,c.jsx)(t.td,{children:"[]string"}),(0,c.jsx)(t.td,{}),(0,c.jsx)(t.td,{children:"no"}),(0,c.jsx)(t.td,{children:"List of versions that the controller should make available of a cluster stack. Used only in case very specific versions are supposed to be used. Not required if always the latest versions should be made available."})]}),(0,c.jsxs)(t.tr,{children:[(0,c.jsx)(t.td,{children:"autoSubscribe"}),(0,c.jsx)(t.td,{children:"bool"}),(0,c.jsx)(t.td,{children:"true"}),(0,c.jsx)(t.td,{children:"no"}),(0,c.jsx)(t.td,{children:"Specifies whether the controller should automatically check whether there are new releases of the cluster stack and if so automatically download them."})]}),(0,c.jsxs)(t.tr,{children:[(0,c.jsx)(t.td,{children:"noProvider"}),(0,c.jsx)(t.td,{children:"bool"}),(0,c.jsx)(t.td,{children:"false"}),(0,c.jsx)(t.td,{children:"no"}),(0,c.jsx)(t.td,{children:"If set to true, the controller does not expect any provider-specific objects and just focuses on applying Cluster API objects in management cluster and cluster addons in all workload clusters."})]}),(0,c.jsxs)(t.tr,{children:[(0,c.jsx)(t.td,{children:"providerRef"}),(0,c.jsx)(t.td,{children:"object"}),(0,c.jsx)(t.td,{}),(0,c.jsx)(t.td,{children:"no"}),(0,c.jsx)(t.td,{children:"ProviderRef has to be specified if spec.noProvider is false. It references the ProviderClusterStackReleaseTemplate that contains all information to create the ProviderClusterStackRelease objects."})]})]})]}),"\n",(0,c.jsx)(t.h3,{id:"example-of-the-clusterstack-object",children:"Example of the ClusterStack object"}),"\n",(0,c.jsx)(t.p,{children:"You should create one of these objects for each of your bare metal servers that you want to use for your deployment."}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-yaml",children:'apiVersion: clusterstack.x-k8s.io/v1alpha1\nkind: ClusterStack\nmetadata:\n  name: clusterstack\n  namespace: cluster\nspec:\n  provider: docker\n  name: ferrol\n  kubernetesVersion: "1.27"\n  channel: stable\n  autoSubscribe: true\n  noProvider: true\n'})})]})}function h(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,c.jsx)(t,{...e,children:(0,c.jsx)(d,{...e})}):d(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>o,x:()=>l});var r=s(96540);const c={},n=r.createContext(c);function o(e){const t=r.useContext(n);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:o(e.components),r.createElement(n.Provider,{value:t},e.children)}}}]);